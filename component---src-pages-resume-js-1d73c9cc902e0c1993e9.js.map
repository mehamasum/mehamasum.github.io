{"version":3,"sources":["webpack:///./src/pages/resume.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/seo/Facebook.jsx","webpack:///./src/components/seo/Twitter.jsx","webpack:///./src/components/seo/SEO.jsx","webpack:///./.cache/public-page-renderer-prod.js"],"names":["Resume","colorful","url","indexOf","render","_this","this","console","log","props","_this$props","location","title","desc","banner","pdfUrl","search","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","gatsby__WEBPACK_IMPORTED_MODULE_5__","query","site","siteMetadata","siteUrl","Fragment","_components_seo_SEO__WEBPACK_IMPORTED_MODULE_4__","article","pathname","src","frameBorder","style","position","overflow","width","height","data","_public_static_d_2869746472_json__WEBPACK_IMPORTED_MODULE_2__","React","Component","__webpack_require__","r","__webpack_exports__","d","graphql","StaticQueryContext","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3___default","_parse_path__WEBPACK_IMPORTED_MODULE_4__","createContext","Consumer","staticQueryData","children","Error","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","Facebook","_ref","type","image","fbAppId","react_default","Helmet_default","property","content","defaultProps","Twitter","username","name","SEO","gatsby_browser_entry","_props$site","buildTime","_props$site$siteMetad","defaultTitle","titleAlt","shortName","author","siteLanguage","logo","pathPrefix","defaultDescription","description","defaultBanner","twitter","seo","schemaOrgJSONLD","@context","@type","@id","alternateName","headline","datePublished","dateModified","publisher","isPartOf","mainEntityOfPage","lang","JSON","stringify","seo_Facebook","seo_Twitter","_2757271287","bool","ProdPageRenderer","pageResources","loader","getResourcesForPathnameSync","InternalPageRenderer","Object","assign","json","shape"],"mappings":"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","file":"component---src-pages-resume-js-1d73c9cc902e0c1993e9.js","sourcesContent":["import React from 'react'\nimport SEO from '../components/seo/SEO'\nimport { StaticQuery, graphql } from 'gatsby'\n\nexport default class Resume extends React.Component {\n  colorful(url) {\n    if (url.indexOf('?color=true') != -1) return true\n    return false\n  }\n  render() {\n    console.log(this.props)\n    const { title, desc, banner, location } = this.props\n    let pdfUrl =\n      'https://mehamasum.github.io/docs/Resume_Mehedi-Hasan-Masum_CSEDU'\n    if (this.colorful(location.search)) pdfUrl += '_'\n    pdfUrl += '.pdf'\n\n    return (\n      <StaticQuery\n        query={query}\n        render={props => {\n          const {\n            site: {\n              siteMetadata: { siteUrl },\n            },\n          } = props\n\n          return (\n            <React.Fragment>\n              <SEO\n                article={false}\n                title={`Meha Masum's Resume`}\n                desc={`Mehedi Hasan Masum's Resume | PDF Download`}\n                pathname={this.props.location.pathname}\n              />\n              <iframe\n                src={`https://docs.google.com/viewer?url=${pdfUrl}&amp;embedded=true`}\n                frameBorder=\"0\"\n                style={{\n                  position: 'absolute',\n                  overflow: 'hidden',\n                  width: '100%',\n                  height: '100%',\n                }}\n              />\n            </React.Fragment>\n          )\n        }}\n      />\n    )\n  }\n}\n\nconst query = graphql`\n  query Resume {\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport Helmet from 'react-helmet'\n\nconst Facebook = ({ url, type, title, desc, image, fbAppId }) => (\n  <Helmet>\n    {fbAppId && <meta property=\"fb:app_id\" content={fbAppId} />}\n    {url && <meta property=\"og:url\" content={url} />}\n    {type && <meta property=\"og:type\" content={type} />}\n    {title && <meta property=\"og:title\" content={title} />}\n    {desc && <meta property=\"og:description\" content={desc} />}\n    {image && <meta property=\"og:image\" content={image} />}\n  </Helmet>\n)\n\nexport default Facebook\n\nFacebook.propTypes = {\n  url: PropTypes.string,\n  type: PropTypes.string,\n  title: PropTypes.string,\n  desc: PropTypes.string,\n  image: PropTypes.string,\n}\n\nFacebook.defaultProps = {\n  url: null,\n  type: null,\n  title: null,\n  desc: null,\n  image: null,\n}\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport Helmet from 'react-helmet'\n\nconst Twitter = ({ type, username, title, desc, image }) => (\n  <Helmet>\n    <meta name=\"twitter:card\" content={type} />\n    {username && <meta name=\"twitter:site\" content={username} />}\n    {username && <meta name=\"twitter:creator\" content={username} />}\n    {title && <meta name=\"twitter:title\" content={title} />}\n    {desc && <meta name=\"twitter:description\" content={desc} />}\n    {image && <meta name=\"twitter:image\" content={image} />}\n    {image && <meta name=\"twitter:image:alt\" content={title} />}\n  </Helmet>\n)\n\nexport default Twitter\n\nTwitter.propTypes = {\n  type: PropTypes.string,\n  username: PropTypes.string,\n  title: PropTypes.string,\n  desc: PropTypes.string,\n  image: PropTypes.string,\n}\n\nTwitter.defaultProps = {\n  type: 'summary_large_image',\n  username: null,\n  title: null,\n  desc: null,\n  image: null,\n}\n","import React, { Component } from 'react'\nimport Helmet from 'react-helmet'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\nimport Facebook from './Facebook'\nimport Twitter from './Twitter'\n\nexport default class SEO extends Component {\n  render() {\n    const { title, desc, banner, pathname, article } = this.props\n    return (\n      <StaticQuery\n        query={query}\n        render={props => {\n          const {\n            site: {\n              buildTime,\n              siteMetadata: {\n                title: defaultTitle,\n                titleAlt,\n                shortName,\n                author,\n                siteLanguage,\n                logo,\n                siteUrl,\n                pathPrefix,\n                description: defaultDescription,\n                banner: defaultBanner,\n                twitter,\n                fbAppId,\n              },\n            },\n          } = props\n\n          const seo = {\n            title: title || defaultTitle,\n            description: defaultDescription || desc,\n            image: `${siteUrl}${banner || defaultBanner}`,\n            url: `${siteUrl}${pathname || '/'}`,\n          }\n\n          const realPrefix = pathPrefix === '/' ? '' : pathPrefix\n\n          let schemaOrgJSONLD = [\n            {\n              '@context': 'http://schema.org',\n              '@type': 'WebSite',\n              '@id': siteUrl,\n              url: siteUrl,\n              name: defaultTitle,\n              alternateName: titleAlt || '',\n            },\n          ]\n\n          if (article) {\n            schemaOrgJSONLD = [\n              {\n                '@context': 'http://schema.org',\n                '@type': 'BlogPosting',\n                '@id': seo.url,\n                url: seo.url,\n                name: title,\n                alternateName: titleAlt || '',\n                headline: title,\n                image: {\n                  '@type': 'ImageObject',\n                  url: seo.image,\n                },\n                description: seo.description,\n                datePublished: buildTime,\n                dateModified: buildTime,\n                author: {\n                  '@type': 'Person',\n                  name: author,\n                },\n                publisher: {\n                  '@type': 'Organization',\n                  name: author,\n                  logo: {\n                    '@type': 'ImageObject',\n                    url: siteUrl + realPrefix + logo,\n                  },\n                },\n                isPartOf: siteUrl,\n                mainEntityOfPage: {\n                  '@type': 'WebSite',\n                  '@id': siteUrl,\n                },\n              },\n            ]\n          }\n\n          return (\n            <React.Fragment>\n              <Helmet title={seo.title}>\n                <html lang={siteLanguage} />\n                <meta name=\"description\" content={seo.description} />\n                <meta name=\"image\" content={seo.image} />\n                <meta name=\"apple-mobile-web-app-title\" content={shortName} />\n                <meta name=\"application-name\" content={shortName} />\n                <script type=\"application/ld+json\">\n                  {JSON.stringify(schemaOrgJSONLD)}\n                </script>\n              </Helmet>\n              <Facebook\n                desc={seo.description}\n                image={seo.image}\n                title={seo.title}\n                type={article ? 'article' : 'website'}\n                url={seo.url}\n                fbAppId={fbAppId}\n              />\n              <Twitter\n                title={seo.title}\n                image={seo.image}\n                desc={seo.description}\n                username={twitter}\n              />\n            </React.Fragment>\n          )\n        }}\n      />\n    )\n  }\n}\n\nSEO.propTypes = {\n  title: PropTypes.string,\n  desc: PropTypes.string,\n  banner: PropTypes.string,\n  pathname: PropTypes.string,\n  article: PropTypes.bool,\n}\n\nSEO.defaultProps = {\n  title: null,\n  desc: null,\n  banner: null,\n  pathname: null,\n  article: false,\n}\n\nconst query = graphql`\n  query SEO {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD\")\n      siteMetadata {\n        defaultTitle: title\n        titleAlt\n        shortName\n        author\n        siteLanguage\n        logo\n        siteUrl: url\n        pathPrefix\n        defaultDescription: description\n        defaultBanner: banner\n        twitter\n        fbAppId\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}