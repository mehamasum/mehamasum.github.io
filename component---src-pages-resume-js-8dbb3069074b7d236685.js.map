{"version":3,"sources":["webpack:///./src/pages/resume.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/seo/Facebook.jsx","webpack:///./src/components/seo/Twitter.jsx","webpack:///./src/components/seo/SEO.jsx","webpack:///./.cache/public-page-renderer-prod.js"],"names":["Resume","colorful","url","indexOf","render","_this","this","location","props","pdfUrl","search","react__WEBPACK_IMPORTED_MODULE_3___default","a","createElement","gatsby__WEBPACK_IMPORTED_MODULE_5__","query","site","siteMetadata","siteUrl","Fragment","_components_seo_SEO__WEBPACK_IMPORTED_MODULE_4__","article","title","desc","pathname","src","frameBorder","style","position","overflow","width","height","data","_public_static_d_2869746472_json__WEBPACK_IMPORTED_MODULE_2__","React","Component","__webpack_require__","r","__webpack_exports__","d","graphql","StaticQueryContext","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3__","_public_page_renderer__WEBPACK_IMPORTED_MODULE_3___default","_parse_path__WEBPACK_IMPORTED_MODULE_4__","createContext","Consumer","staticQueryData","children","Error","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","Facebook","_ref","type","image","fbAppId","react_default","Helmet_default","property","content","defaultProps","Twitter","username","name","SEO","_this$props","banner","gatsby_browser_entry","_props$site","buildTime","_props$site$siteMetad","defaultTitle","titleAlt","shortName","author","siteLanguage","logo","pathPrefix","defaultDescription","description","defaultBanner","twitter","seo","schemaOrgJSONLD","@context","@type","@id","alternateName","headline","datePublished","dateModified","publisher","isPartOf","mainEntityOfPage","lang","JSON","stringify","seo_Facebook","seo_Twitter","_2757271287","bool","ProdPageRenderer","pageResources","loader","getResourcesForPathnameSync","InternalPageRenderer","Object","assign","json","shape"],"mappings":"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","file":"component---src-pages-resume-js-8dbb3069074b7d236685.js","sourcesContent":["import React from 'react'\nimport SEO from '../components/seo/SEO'\nimport { StaticQuery, graphql } from 'gatsby'\n\nexport default class Resume extends React.Component {\n  colorful(url) {\n    if (url.indexOf('?color=true') != -1) return true\n    return false\n  }\n  render() {\n    const { location } = this.props\n    let pdfUrl =\n      'https://mehamasum.github.io/docs/Resume_Mehedi-Hasan-Masum_CSEDU'\n    if (this.colorful(location.search)) pdfUrl += '_'\n    pdfUrl += '.pdf'\n\n    return (\n      <StaticQuery\n        query={query}\n        render={props => {\n          const {\n            site: {\n              siteMetadata: { siteUrl },\n            },\n          } = props\n\n          return (\n            <React.Fragment>\n              <SEO\n                article={false}\n                title={`Meha Masum's Resume`}\n                desc={`Mehedi Hasan Masum's Resume | PDF Download`}\n                pathname={this.props.location.pathname}\n              />\n              <iframe\n                src={`https://docs.google.com/viewer?url=${pdfUrl}&amp;embedded=true`}\n                frameBorder=\"0\"\n                style={{\n                  position: 'absolute',\n                  overflow: 'hidden',\n                  width: '100%',\n                  height: '100%',\n                }}\n              />\n            </React.Fragment>\n          )\n        }}\n      />\n    )\n  }\n}\n\nconst query = graphql`\n  query Resume {\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport parsePath from \"./parse-path\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away,. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n.` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport Helmet from 'react-helmet'\n\nconst Facebook = ({ url, type, title, desc, image, fbAppId }) => (\n  <Helmet>\n    {fbAppId && <meta property=\"fb:app_id\" content={fbAppId} />}\n    {url && <meta property=\"og:url\" content={url} />}\n    {type && <meta property=\"og:type\" content={type} />}\n    {title && <meta property=\"og:title\" content={title} />}\n    {desc && <meta property=\"og:description\" content={desc} />}\n    {image && <meta property=\"og:image\" content={image} />}\n  </Helmet>\n)\n\nexport default Facebook\n\nFacebook.propTypes = {\n  url: PropTypes.string,\n  type: PropTypes.string,\n  title: PropTypes.string,\n  desc: PropTypes.string,\n  image: PropTypes.string,\n}\n\nFacebook.defaultProps = {\n  url: null,\n  type: null,\n  title: null,\n  desc: null,\n  image: null,\n}\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport Helmet from 'react-helmet'\n\nconst Twitter = ({ type, username, title, desc, image }) => (\n  <Helmet>\n    <meta name=\"twitter:card\" content={type} />\n    {username && <meta name=\"twitter:site\" content={username} />}\n    {username && <meta name=\"twitter:creator\" content={username} />}\n    {title && <meta name=\"twitter:title\" content={title} />}\n    {desc && <meta name=\"twitter:description\" content={desc} />}\n    {image && <meta name=\"twitter:image\" content={image} />}\n    {image && <meta name=\"twitter:image:alt\" content={title} />}\n  </Helmet>\n)\n\nexport default Twitter\n\nTwitter.propTypes = {\n  type: PropTypes.string,\n  username: PropTypes.string,\n  title: PropTypes.string,\n  desc: PropTypes.string,\n  image: PropTypes.string,\n}\n\nTwitter.defaultProps = {\n  type: 'summary_large_image',\n  username: null,\n  title: null,\n  desc: null,\n  image: null,\n}\n","import React, { Component } from 'react'\nimport Helmet from 'react-helmet'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\nimport Facebook from './Facebook'\nimport Twitter from './Twitter'\n\nexport default class SEO extends Component {\n  render() {\n    const { title, desc, banner, pathname, article } = this.props\n    return (\n      <StaticQuery\n        query={query}\n        render={props => {\n          const {\n            site: {\n              buildTime,\n              siteMetadata: {\n                title: defaultTitle,\n                titleAlt,\n                shortName,\n                author,\n                siteLanguage,\n                logo,\n                siteUrl,\n                pathPrefix,\n                description: defaultDescription,\n                banner: defaultBanner,\n                twitter,\n                fbAppId,\n              },\n            },\n          } = props\n\n          const seo = {\n            title: title || defaultTitle,\n            description: defaultDescription || desc,\n            image: `${siteUrl}${banner || defaultBanner}`,\n            url: `${siteUrl}${pathname || '/'}`,\n          }\n\n          const realPrefix = pathPrefix === '/' ? '' : pathPrefix\n\n          let schemaOrgJSONLD = [\n            {\n              '@context': 'http://schema.org',\n              '@type': 'WebSite',\n              '@id': siteUrl,\n              url: siteUrl,\n              name: defaultTitle,\n              alternateName: titleAlt || '',\n            },\n          ]\n\n          if (article) {\n            schemaOrgJSONLD = [\n              {\n                '@context': 'http://schema.org',\n                '@type': 'BlogPosting',\n                '@id': seo.url,\n                url: seo.url,\n                name: title,\n                alternateName: titleAlt || '',\n                headline: title,\n                image: {\n                  '@type': 'ImageObject',\n                  url: seo.image,\n                },\n                description: seo.description,\n                datePublished: buildTime,\n                dateModified: buildTime,\n                author: {\n                  '@type': 'Person',\n                  name: author,\n                },\n                publisher: {\n                  '@type': 'Organization',\n                  name: author,\n                  logo: {\n                    '@type': 'ImageObject',\n                    url: siteUrl + realPrefix + logo,\n                  },\n                },\n                isPartOf: siteUrl,\n                mainEntityOfPage: {\n                  '@type': 'WebSite',\n                  '@id': siteUrl,\n                },\n              },\n            ]\n          }\n\n          return (\n            <React.Fragment>\n              <Helmet title={seo.title}>\n                <html lang={siteLanguage} />\n                <meta name=\"description\" content={seo.description} />\n                <meta name=\"image\" content={seo.image} />\n                <meta name=\"apple-mobile-web-app-title\" content={shortName} />\n                <meta name=\"application-name\" content={shortName} />\n                <script type=\"application/ld+json\">\n                  {JSON.stringify(schemaOrgJSONLD)}\n                </script>\n              </Helmet>\n              <Facebook\n                desc={seo.description}\n                image={seo.image}\n                title={seo.title}\n                type={article ? 'article' : 'website'}\n                url={seo.url}\n                fbAppId={fbAppId}\n              />\n              <Twitter\n                title={seo.title}\n                image={seo.image}\n                desc={seo.description}\n                username={twitter}\n              />\n            </React.Fragment>\n          )\n        }}\n      />\n    )\n  }\n}\n\nSEO.propTypes = {\n  title: PropTypes.string,\n  desc: PropTypes.string,\n  banner: PropTypes.string,\n  pathname: PropTypes.string,\n  article: PropTypes.bool,\n}\n\nSEO.defaultProps = {\n  title: null,\n  desc: null,\n  banner: null,\n  pathname: null,\n  article: false,\n}\n\nconst query = graphql`\n  query SEO {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD\")\n      siteMetadata {\n        defaultTitle: title\n        titleAlt\n        shortName\n        author\n        siteLanguage\n        logo\n        siteUrl: url\n        pathPrefix\n        defaultDescription: description\n        defaultBanner: banner\n        twitter\n        fbAppId\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}