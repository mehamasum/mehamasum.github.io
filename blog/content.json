{"pages":[],"posts":[{"title":"DevOps checklist for bootstrapping new projects","text":"Starting out a new project? Make sure you add these into your DevOps workflow as your project grows. This may also be a good starting point if you just started learning DevOps. .content ul { margin-left: 0; } .content ul li { list-style-type: none;} .content ul li input[type=\"checkbox\"] { margin-right: 0.5em; } Dev automation Environment setup for local development Pull request automation Automated unit test running with code coverage Linting Automated security scanning Automated E2E test running Ephemeral environments: for PR Reviewers, QA, Designers, PMs Notifications to PR Author/Reviewers Deployment automation Continuous Staging: Mirror prod environment for QA, Designers, PMs Zero downtime deployment: Blue-Green deployments/Rolling deployments Feature flagging/Canary deployments Roll back mechanism Autoscaling Application Performance Management (APM) Log aggregation: e.g. Logstash + ElasticSearch + Kibana Metrics: e.g. Prometheus Error tracking: e.g. Sentry Monitoring: Take the metrics and logs and convert them into health metrics e.g. Grafana Uptime status: e.g. Pingdom Alerting: e.g. PagerDuty document.querySelectorAll('.content ul li input[type=\"checkbox\"]').forEach(node => node.disabled = false); document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/blog/2021/8/devops-checklist/"},{"title":"Featured in a livestream as winner of 2021 Good Code Hackathon","text":"As the winners of 2021 Good Code Hackathon - Jane Goodall Institute challenge, Tanvir and I, joined a DocuSign livestream to chat about our winning app. We discussed learning throughout our build and offered pro-tips for Good Code participants of this year and hackathons in general, plus answered some questions live. document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/blog/2022/8/docusign-livestream/"},{"title":"First-Class Functions - পাইথনে ক্লিন কোড","text":"আজকে আমরা First-Class Functions নিয়ে কথা বলব। উদাহরণগুলো পাইথনে লেখা, কিন্তু যদি একটা ভাষায় ফাংশন First-Class হয় (যেমন পাইথন, জাভাস্ক্রিপ্ট) তাহলে এই লেখার সব কয়টা উদাহরণ একটু আধটু এডিট করে হুবুহু ঐ ভাষায় বদলে ফেলা যাবে। এই টপিকটা “Higher Order Functions”, “Currying”, “Closures”, “Decorators” ইত্যাদি টপিক বুঝতে সাহায্য করবে। First-Class Functions কি?যেসব ভাষায় Function কে First-Class Object হিসেবে ট্রিট করা হয়, বলা হয় যে তারা First-Class Functions সাপোর্ট করে। First-Class Object হিসেবে ট্রিট করা হয় মানে ওই ভাষার অন্যান্য Object এর উপর যেসব অপারেশন চালানো যায়, Function এর উপরেও সেগুলো চালানো যায়। যেমন ধর, অন্য ফাংশনের আর্গুমেন্ট হিসাবে ফাংশন পাঠানো, কোনো ফাংশন থেকে ফাংশন রিটার্ন করা, ফাংশনকে কোন ভ্যারিয়েবলে অ্যাসাইন করা বা ডাটা স্ট্রাকচারে সেভ করা- এসব আরকি। সব কয়টা কাজেরই আমরা একটা করে উদাহরণ দেখব। ভ্যারিয়েবলে অ্যাসাইন করা ও ডাটা স্ট্রাকচারে ঢোকানোএকটা ফাংশন লেখি যেটা দুইটা নাম্বার ইনপুট নেয় এবং সেগুলোর যোগফল রিটার্ন করেঃ 12def add(a, b): return a + b এই ফাংশনটা আমরা সচরাচর কিভাবে execute করি? ফাংশনের নামের পর parentheses (ফার্স্ট ব্রাকেট) দিয়ে। parentheses এর ভেতর আর্গুমেন্ট লেখি একে একে। যেমন, ১ আর ১ যোগ করতে চাইলেঃ 1add(1, 1) যদি রিটার্ন করা ভ্যালুটা কোন ভ্যারিয়েবল এ অ্যাসাইন করতাম তাহলে এভাবেঃ 12v = add(1, 1)print(v) Output: 12 এবার আমরা ফাংশনটাকে সরাসরি execute না করে একটা ভ্যারিয়েবলে অ্যাসাইন করিঃ 1f = add লক্ষ্য কর, এবার কিন্তু আমরা ফাংশনের নামের পর parentheses দেই নাই, কারণ ফাংশনের নামের পর parentheses দেওয়ার মানে ওই ফাংশন কল দেওয়া (execute করা)। এবার শুধু ফাংশনটাকে আরেকটা ভ্যারিয়েবল f এ অ্যাসাইন করেছি। f এর ভ্যালু প্রিন্ট করলে দেখা যাবে f একটা ফাংশনঃ 1print(f) Output: 1&lt;function add at 0x7f135afc7048&gt; তারমানে আমরা এখন f কে parentheses দিয়ে execute করতে পারিঃ 1f(1, 1) যদি রিটার্ন করা ভ্যালুটা কোন ভ্যারিয়েবল এ অ্যাসাইন করতাম তাহলেঃ 12v = f(1, 1)print(v) Output: 12 এভাবে First-Class ফাংশনকে ভ্যারিয়েবলে অ্যাসাইন করা যায়। এমনকি যেকোনো ডাটা স্ট্রাকচারেও ঢোকানো যায়। যেমন এখানে ফাংশনকে একটা লিস্টের প্রথম ইলিমেন্ট হিসাবে নিলাম। এবার প্রথম ইলিমেন্টটাকে কল দিলামঃ 1234my_list = [add, ]first_element = my_list[0]v = first_element(1, 1)print(v) Output: 12 অন্য ফাংশনের আর্গুমেন্ট হিসাবে পাঠানোআমরা এমন একটা ফাংশন লিখব যেটা আগের add ফাংশনটার মত দুইটা নাম্বার ইনপুট নিবে কিন্তু দুইটা নাম্বারের ওপর কি অপারেশন চালাবে সেটা ফিক্সড না, সেটা নির্ভর করবে ৩য় প্যারামিটার এর ওপর। যদি ৩য় প্যারামিটার যোগ করতে বলে তাহলে যোগফল রিটার্ন করে অথবা যদি বিয়োগ করতে বলে তাহলে বিয়োগফল রিটার্ন করে, ইত্যাদি। এটা কিভাবে করা যেত? আমরা ৩য় প্যারামিটার হিসেবে একটা স্ট্রিং নিয়ে এর ভ্যালুর ওপর if-else লিখে করতে পারতামঃ 12345def calc(a, b, operation): if operation == 'add': return a + b elif operation == 'subtract': return a - b তারপর যোগ করতে গেলেঃ 12x = calc(1, 1, 'add')print(x) Output: 12 বিয়োগ করতে গেলেঃ 12x = calc(1, 1, 'subtract')print(x) Output: 10 এভাবে লেখার চেয়ে আরেকটু ভালো সল্যুশন হচ্ছে দুইটা নাম্বারের ওপর কি অপারেশন চালবে সেটা একটা ফাংশন হিসাবে ইনপুট নেওয়াঃ 123def calc(a, b, operation): r = operation(a, b) return r লক্ষ্য কর আমরা আগের মতই operation নামের একটা ইনপুট নিয়েছি। কিন্তু operation আর আগের মত স্ট্রিং না, এটা একটা ফাংশন। এর মানে আমরা এর নামের নামের পর parentheses বসিয়ে ওই ফাংশন কল দিতে পারি। লক্ষ্য কর ফাংশনের ভেতরে তাই করা হচ্ছে। এই calc ফাংশন যেই দুইটি নম্বর ইনপুট নিত, সেই দুইটি নম্বরকে দিয়েই operation নামের ফাংশনটা কল দেওয়া হয়েছে এবং রিটার্ন ভ্যালুটিকে calc ফাংশন এর রিটার্ন ভ্যালু হিসাবে ফেরত পাঠানো হচ্ছে। তাহলে এবার calc ফাংশন কিভাবে ব্যবহার করা হবে? যোগ করার জন্য ৩য় আর্গুমেন্ট হিসেবে আমাদের একটু আগে লেখা add ফাংশনটা পাঠিয়ে দিলেই হয়! 12v = calc(1, 1, add)print(v) Output: 12 লক্ষ্য কর, calc এর ৩য় আর্গুমেন্ট হিসেবে শুধু ফাংশন এর নাম পাঠানো হয়েছে, ফাংশনটা কল দেওয়া হবে calc এর ভেতরে যেয়ে। এবার বিয়োগ করার জন্য আরেকটা ফাংশন লেখা যাকঃ 12def subtract(a, b): return a - b calc ফাংশনটি দিয়ে বিয়োগ করতে এবার এই নতুন ফাংশনটা পাঠিয়ে দিলেই হলঃ 12v = calc(1, 1, subtract)print(v) Output: 10 মাথায় প্রশ্ন আসার কথা এই কাজটা কেন এমন করে করা লাগলো? আগের মত স্ট্রিং নিলে কি হত? আগের মত রাখলে নতুন কোনো অপারেশন (যেমন multiplication) করতে গেলে আমাদের calc ফাংশন এর ভেতরে নতুন করে else if লেখা লাগত। সেটা যদি করা সম্ভব না হয় তাহলে নতুন কোনো অপারেশন করা সম্ভব হত না। ধর তোমার লেখা calc ফাংশন একটা লাইব্রেরি থেকে পাবলিশ করা হলো। এখন কেউ যদি তোমার calc ফাংশন বাবহার করে দুইটা নম্বর গুন করতে চায়, তাহলে সে আর তা করতে পারবে না কারণ লাইব্রেরি এর কোড সে এডিট করতে পারবে না। তাছাড়াও এভাবে if-else করে কোড লেখা খুবই বাজে প্রাকটিস। আমরা সেটা নিয়ে পরে একদিন কথা বলব। আমরা দেখলাম কিভাবে একটা ফাংশনকে আরেকটা ফাংশনের আর্গুমেন্ট হিসাবে পাঠানো যায়। ফাংশন থেকে ফাংশন রিটার্নফাংশন থেকে অন্যান্য সব কিছুর মত একটা আস্ত ফাংশনও রিটার্ন করা যায়। একটা ফাংশন লেখা যাক যেটা একটা স্ট্রিং ইনপুট নেয়। কিন্তু সাথে সাথে প্রিন্ট করে না। বরং একটা ফাংশন রিটার্ন করে দেয়, যাতে পরবর্তীতে সেই ফাংশনটা কল করলে ইনপুটটা প্রিন্ট হয়। 1234def print_msg(msg): def inner_func(): print(msg) return inner_func উপরের উদাহরণে print_msg নামের ফাংশনটার ভেতরে আরেকটা ফাংশন ডিফাইন করা হয়েছে এবং তা রিটার্ন করা হয়েছে। আবারো লক্ষ কর, রিটার্ন স্টেটমেন্টে খালি নাম পাঠানো হয়েছে, ফাংশন কল দেওয়া হয়নাই। তারমানে দাড়ায় print_msg ফাংশনটার রিটার্ন ভ্যালু কে একটা ভ্যারিয়েবলএ অ্যাসাইন করে তারপর সেটাকে কল করা যায়ঃ 12v = print_msg('hello world')v() এখানে v একটা ফাংশন। v এর পর parentheses (ফার্স্ট ব্রাকেট) দিয়ে তাকে কল দেওয়া হয়েছে। এই কাজটা কিন্তু এক লাইনেও করা যেতঃ 1print_msg('hello world')() এখানে print_msg ফাংশনটা কল দিয়ে যেই রিটার্ন ভ্যালু তা পাওয়া গেল তাকে আবার কল দেওয়া হয়েছে। এই জন্য পর পর দুইটা parentheses। আগের বার এই কাজটাকে ভেঙ্গে দুই ধাপে করা হয়েছিল। এই উদাহরণটা খুব কাজের কিছু হয়নি, আমরা Decorators শেখার সময় ফাংশন থেকে ফাংশন রিটার্ন করা নিয়ে আরও অনেক উদাহরণ দেখব। ভালো কথা, একটা জিনিস লক্ষ্য করেছ? print_msg ফাংশনটাকে আমি “hello world” স্ট্রিং দিয়ে কল দিয়েছিলাম। এই স্ট্রিং টা কিন্তু inner_func ও ব্যবহার করেছে। এভাবে একটা ফাংশন এর ভেতরের কোন ফাংশন তার বাইরের scope (enclosing scope) এর ভ্যারিয়েবল এক্সেস করতে পারে। এটাকে বলে “Clousure”. আর যেসব ফাংশন অন্য ফাংশনকে ইনপুট হিসেবে নেয় বা আরেকটা ফাংশন রিটার্ন করে তাদের Higher Order Functions বলে। সফটওয়্যার ডেভেলপমেন্ট লাইফে বহু জায়গায় বহু রূপে এদের দেখা পাবে। শেষের কথানিজে কোড করে দেখার কোন বিকল্প নাই। হাজার হাজার টিউটোরিয়াল দেখে তুমি যতটুক না শিখতে পারবে তারচে বেশি শিখবে নিজে কোড লিখে প্রিন্ট দিয়ে দিয়ে। অনুশীলন1234def make_tag(tag): # write your code here # and remove the pass statement pass উপরের ফাংশনটা শেষ কর। তারপর নিচের কলগুলো execute করলে এরকম আউটউট আসবেঃ 123print(make_tag('h1')('Wikipedia'))print(make_tag('h2')('The Free Encyclopedia'))print(make_tag('h2')('Wikipedia is a ' + make_tag('strong')('free') + ' online encyclopedia')) Output: 123&lt;h1&gt;Wikipedia&lt;/h1&gt;&lt;h2&gt;The Free Encyclopedia&lt;/h2&gt;&lt;h2&gt;Wikipedia is a &lt;strong&gt;free&lt;/strong&gt; online encyclopedia&lt;/h2&gt; আরো জানতে Python closures Higher Order Functions and Currying আজ এ পর্যন্তই। সামনের পর্বে অন্য কিছু নিয়ে কথা হবে, সে পর্যন্ত ভালো থাকো। document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/blog/2019/5/first-class-functions/"},{"title":"How to change Docker data directory in ubuntu","text":"If you have a lot of Docker images, containers, volumes etc on your root partition and removing all unnecessary stuff with docker system prune didn’t help- you might want to move your Docker data out of the root partition to a different partition (for example, /home partition).Here are the steps to do that. Stop the Docker daemon if it is runningsudo service docker stop Copy existing data to the new location Create the new directory if it doesn’t exist alreadymkdir -p /new/path (for example, mkdir -p /home/user/docker) Copy the data over from /var/lib/docker (Docker creates data there by default)sudo cp -a /var/lib/docker/ /new/path Let docker know of this new location Create /etc/docker/daemon.json if doesn’t existsudo touch /etc/docker/daemon.json Add/replace \"data-root\" to \"/new/path\" (for example: \"data-root\": \"/home/username/docker\"). Important: ~/ shorthand will not work. For example, you can not put \"data-root\": \"~/docker\" For a newly created file, the file will look like this: 123{ \"data-root\": \"/new/path\" } Remove existing data You may want to keep a backup first:sudo mv /var/lib/docker /var/lib/docker-backupand delete these once you confirm docker is working finesudo rm -rf /var/lib/docker-backup OR, delete them parmanently now 🤷sudo rm -rf /var/lib/docker Start docker and check if everything is running like beforesudo service docker start document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/blog/2021/7/how-to-change-docker-data-directory-in-ubuntu/"},{"title":"Interview experience at Automattic","text":"The interview process at Automattic is little bit different than traditional SE interview process you find all over the world. The whole process is async, and it is long (a couple of months) and can be tedious. This is my story- the official process can be found here. BackgroundI became interested to look for full-remote roles after reading this blog post from a fellow countryman.Please do read it if you want to learn more about remote jobs. ApplicationI applied online for a Senior Software Engineer role. A couple of days later, a recruiter reached out over email. They asked me to pick a time slot for a 90-minute text-only interview. Once I picked a slot, a meeting was scheduled and I was added to a Slack workspace. A dedicated slack channel was created for my interview (these things were all automated, cool eh?). My interviewer and a few HR folks were added to the channel at the same time. They dropped a few links in there for me to read at my leisure - mostly about what to expect in the interview process. Technical interviewOn the scheduled day I sat for a 90-minute text-only interview. This was a slack conversation with another engineer. It’s based on various topics you typically talk about on the screening interview like my background, my interests, philosophies, etc. For example, we talked about my experience with typical day-to-day job of a SE like unit testing and CI/CD etc, a complex bug I had encountered and how I ran troubleshooting, and how I fixed it. You get the idea. I sat on the other side of the table many times for NewsCred, and I could tell I was doing well. After a few days, my recruiter got back to me (on Slack) and confirmed the next steps. Code testFor the next step, I was invited to a Github org for a code test. I had to fulfill some objectives in a repo (an unknown toy codebase). Again, the invitaion and repository creation etc were all done via an automation - which I thought was very impressive. I was given an online editor so that I don’t have to set up anything locally (tho I coded locally in the end and pushed frequently to see the changes live). I hadn’t written PHP in a while, but I was told not to worry about the programming language. I had to write a bit of PHP and JS code and add unit tests and then opened a Pull Request after 2 or 3 days. An engineer reviewed the PR and left feedback. They even did QA and gave feedback that I missed a bug. I worked on that for another couple of days and fixed it. This time around, they were happy with the results and gave me a green signal for the next round. This is not paid project and took about a week to finish. The codebase was not super clean but I think it is an example of how all code tests should be. People should not ask candidates to build something from scratch, rather provide them with the base and ask them to add/fix/improve on that. The trialThe trial is the most important part of this process and a test to see whether the candiate is a right fit for a full-time remote role. Again I had to fulfill objectives in yet another unknown toy codebase, this time a much larger repo. I was assigned a trial buddy (who would act as a Product Manager), I was given full freedom on how I wanted to implement the objective. I would incrementally make progress each week and ask for code review on an open PR. An engineer (the trial buddy) would review the pull request and leave questions and feedback. Same as the code test, my coding styles, unit testing, git commit messages, etc were under the microscope. Another important part of the trial is to evaluate how I was communicating. I was asked to leave a cumulative updates every week (in an internal blogging tool named P2), on what I am doing and how I am approaching the problem each day (so my reviewer would know my thought process). It was also important for my recruiter to see how I was communicating with my trial buddy (over Slack, Github, and P2) to determine if I would be a good fit. The trial involved reading a lot of legacy code. I also had to make some architectural decisions and had to document why I choose one path over another in the P2 blog. This part was paid. It took around four weeks to finish (people usually do it in about six weeks). With this passed, you are sure to receive an offer. Informal chat with DevEx teamThis one was a video call. We talked about my interests to find the right team for me. Offer from HRThis was another slack chat. We negotiated terms. Work with usRemote jobs — work from anywhere.Want to make the web a better place for more than a billion people each month? We’re hiring. Here are some job application tips from Automattic’s Talent team. document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/blog/2022/2/interview-at-automattic/"},{"title":"Explanation of Boyer-Moore Majority Voting Algorithm","text":"The algorithmGiven a sequence of votes, we want to know who won by majority. 123 A A A C C B B C C C B C C ^?:0 We will sweep down the sequence starting at the pointer position shown above. As we sweep we maintain a pair consisting of a current candidate and a counter. Initially, the current candidate is unknown and the counter is 0. When we move the pointer forward over an element e: If the counter is 0 - we set the current candidate to e and we set the counter to 1. If the counter is not 0 - we increment or decrement the counter according to whether e is the current candidate. When we are done, the current candidate is the majority element, if there is a majority. How does it work?For a cadidate to win by majority, they should get more than half of the total votes cast. A vote counts towards majority of a candidate until there is a vote cast for any of the oppositions.I.e. a vote is “nullified” in counting toward majority by any other vote that was cast to a different cadidate. So if someone wants to win by majority, thay would have to have some votes that were not nullified. Now compare this to this logic to the algorithm written above. SimulationLets say there are 3 cadidates (A B and C) and 13 votes cast. Initial123 A A A C C B B C C C B C C ^?:0 At first, we don’t know who has majority and how “strong” their majority may be. Vote 11234A A A C C B B C C C B C C ^A:1 A gets a vote. So we assume A could have majority by the end of counting. Vote 2123A A A C C B B C C C B C C ^ A:2 A gets aonther vote. It counts towards her majority. Vote 3123A A A C C B B C C C B C C ^ A:3 A gets aonther vote. It counts towards her majority. Vote 4123A A A C C B B C C C B C C ^ A:2 C gets a vote. A‘s majority is hurt. But this vote doesn’t count towards C‘s majority. It only “hurts” A. Vote 5123A A A C C B B C C C B C C ^ A:1 C gets another vote. A‘s majority takes more damage. Vote 6123A A A C C B B C C C B C C ^ ?:0 B gets a vote now. A‘s majority is hurt even more. Inface, no one has majority at this moment. Vote 7123A A A C C B B C C C B C C ^ B:1 B gets another vote. It counts towards B‘s majority. Vote 8123A A A C C B B C C C B C C ^ ?:0 C gets a vote. B‘s majority is hurt. Vote 9123A A A C C B B C C C B C C ^ C:1 C gets a vote. At last C has a vote that counts towards C‘s majority. All the other votes were used to counter-balance oppositions. Vote 10123A A A C C B B C C C B C C ^ C:2 C gets another vote. It counts towards C‘s majority. Vote 11123A A A C C B B C C C B C C ^ C:1 B gets a vote. C‘s majority is hurt. Vote 12123A A A C C B B C C C B C C ^ C:2 C gets another vote. It counts towards C‘s majority. Vote 13123A A A C C B B C C C B C C ^ C:3 C gets another vote. It counts towards C‘s majority. C is the winner! Hope this simulation helps someone. Example was taken from Moore’s website. document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/blog/2021/2/moore-majority-voting-algo/"},{"title":"OS&#x2F;161: Paint Shop Synchronization Problem","text":"Problem description can be found here (Part 3: Paint shop synchronization) In this article I’m going to assume: You have already set up and run OS/161 You have a clear understanding how threads work You already understand binary and counting semaphores, now it’s time to use them to solve this problem Main IdeaThe basic task is to make the paint shop run properly. This is a modified version of classic Bounded Buffer Problem and the problem is very realistic. We kept two different buffers, one buffer for placing orders and another buffer for shipping the processed color cans. Customers come and place their order in FIFO basis (or randomly) in the order buffer. After that they keep searching the shipment buffer for the arrival of their can having the proper color combination. Staffs keep checking the order buffer for orders. After getting an order, they fill it with demanded color combination and finally place the ready can in the shipment buffer. So, to summarize, here is what is going to happen: The first idea that comes to mind is that, the customers will come and put their cans in a buffer, lets call it order_buffer. Stuffs will pick up cans from the order_buffer and fill with color. Then they would put the can in another buffer, lets call it shipment_buffer. Finally the customers can take back their can from shipment_buffer. SemaphoresWe have used different semaphores to make sure that: No two customer try to use the order_buffer at the same time No two stuff try to use the shipment_buffer at the same time Neither of the buffers gets overflowed or under-flowed This is quite an easy code to write, but the tricky part is to find out why the deadlocks happen when they happen. Another issue is printing the message “Staff x going home after mixing y orders”. We solved it by making each stuff for fixed period of time so that we can ensure that whoever went home before him reached home by that time. Otherwise this message will be printed in all messed up fashion. Personal notes and codeI have seen solutions that use thread_yield() calls to stop threads. I personally feel that, the task is to utilize the system built semaphores, so using kernel level calls in here is not a good idea. In our solution, we made the users put their empty cans in the order_buffer at random positions. FIFO could have been done as well, but we preferred a different approach. Besides, random is always fair 😛 You may have a look at our solution on github. But remember, the immense joy you would feel once your paint shop runs correctly- will be missed completely if you decide to copy the code. Don’t give up if you fall in deadlocks, it might take even an entire week to solve the problem! Leave your thoughts in comments. Happy coding! document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/blog/2016/6/paintshop-solution/"},{"title":"ওয়েব সার্ভার কি? HTTP কি? এগুলো কিভাবে কাজ করে?","text":"যখন আমরা একটা ওয়েব ব্রাউজার যেমন Chrome খুলে তার এড্রেস বারে একটা ওয়েবসাইটের এড্রেস যেমন http://example.com লিখি তখন আসলে আমরা ব্রাউজার কে বলি এই অ্যাড্রেসে যেই ওয়েব সার্ভার আছে তার সাথে যোগাযোগ করো। যেন চিঠি পাঠানোর মত। ব্রাউজার আমাদের চিঠি ওয়েব সার্ভার কাছে নিয়ে যাচ্ছে এবং ওয়েব সার্ভার সেই চিঠির উত্তরে যা বলবে তা আমাদের কাছে নিয়ে আসবে। ওয়েব সার্ভার মানে ধরে নিন একটি কম্পিউটার যেখানে সারাদিন একটা প্রোগ্রাম চলে। এই প্রোগ্রাম আমাদের চিঠির আশায় বসে থাকে এবং চিঠি পেলে তার উত্তর দেয়। URL কি?এড্রেসবারে আমরা যে এড্রেসটি লিখি তাকে URL বলে এই URL এই বলা থাকে আমাদের ব্রাউজার কার সাথে যোগাযোগ করব কিভাবে যোগাযোগ করবে এবং তাকে কি বলবে। যোগাযোগের ভাষা হচ্ছে HTTP, Host আর Port হচ্ছে যোগাযোগের ঠিকানা। যেমন ধরেন কাউকে বললাম বাংলায় লেখা একটি চিঠি অমুক শহরে অমুক বাড়িতে পাঠান। এখন ব্রাউজার এই URL এর ঠিকানা HTTP ভাষায় যোগাযোগ করবে এবং ওই ওয়েব সার্ভার আমাদের চিঠির যেই উত্তর দিবে আমাদের দেখাবে, যেমন আমরা ফেসবুকের বেলায় একটি সুন্দর HTML ওয়েবপেজ দেখতে পাবো। যোগাযোগের ব্যাপারটা মোটেও এত সহজে হয় না। শুরুতে ব্রাউজার ওয়েব সার্ভার এর সাথে একটি TCP কানেকশন তৈরি করে। তারপরেই TCP কানেকশন দিয়ে HTTP Request পাঠায়। তারপর সার্ভারের উত্তরের জন্য অপেক্ষা করে এবং সার্ভারের উত্তর (HTTP Response) দিলে তা নিয়ে ফেরত আসে এবং আমাদের দেখায় কি উত্তর এলো। এই সাহায্যে শুধুমাত্র ব্রাউজার এর সাথে কথা বলতে পারে তা না, এটি হতে পারে যে কোন কিছু যা HTTP ভাষায় (Protocol) কথা বলতে পারে। এদের Client বলে। Python Socket দিয়ে ওয়েব সার্ভার লিখিতাহলে এবার একটু পরীক্ষা করে দেখা যাক জিনিসটা কিভাবে কাজ করে। Python Socket দিয়ে অতি সাধারণ ওয়েব সার্ভার লিখি (server.py) 1234567891011121314151617181920#!/usr/bin/env python3import socketHOST='127.0.0.1'PORT= 8000with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) s.bind((HOST, PORT)) s.listen() print('Server up ...') while True: conn, addr = s.accept() with conn: request = conn.recv(1024) print('Client said', request) response = b'HTTP/1.1 200 OK\\r\\n\\nHello, World!' conn.sendall(response) print('Server said', response) conn.close() কি লিখলাম?শুরুতে বলে দিলাম হচ্ছে আমাদের ওয়েব সার্ভার HOST এবং PORT। 12HOST='127.0.0.1'PORT= 8000 এরপর TCP সকেট খুললাম, সকেটে কিছু অপশন সেট করলাম, Host এবং Port এ Bind করলাম এবং সকেট দিয়ে Listen করা শুরু করলাম। 12345with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) s.bind((HOST, PORT)) s.listen() print('Server up ...') তারপর নতুন কানেকশন Accept করলাম, কানেকশন এ Client সাইড থেকে কি বলা হয়েছে তা Print দিলাম এবং উত্তরে “Hello world” পাঠিয়ে দিলাম, তা Print দিলাম। 12345678conn, addr = s.accept()with conn: request = conn.recv(1024) print('Client said', request) response = b'HTTP/1.1 200 OK\\r\\n\\nHello, World!' conn.sendall(response) print('Server said', response) conn.close() যেকোনো টার্মিনালে প্রোগ্রামটি রান দিলাম 1python server.py এবার একটি ওয়েব ব্রাউজার খুলে এই http://127.0.0.1:8000/ অ্যাড্রেসে গেলে “Hello world” লেখাটা দেখতে পাবো এভাবেই আমরা একটি HTTP সার্ভার লিখে ফেললাম. HTTP Syntaxঅন্য যেকোনো ভাষার মতো HTTP Protocol এর নিজস্ব সিনট্যাক্স রয়েছে। আমাদের code এ প্রিন্ট দেওয়া লাইন দুটো দেখলে এটা বোঝা যায়। চলো দেখি কি প্রিন্ট হয়েছে টার্মিনালে। খেয়াল করলে দেখবে Client said এই লাইনে সে কথাটি প্রিন্ট হয়েছে: 1Client said b'GET / HTTP/1.1\\r\\n...blah blah...' সব HTTP Request এভাবে লেখা লাগে: শুরুতে থাকে HTTP Method, এক্ষেত্রে GET কেননা আমরা সার্ভার থেকে উত্তর “পেতে” যাচ্ছি তারপর একটা স্পেস দিয়ে থাকে path (এই ক্ষেত্রে /) তারপর একটা স্পেস দিয়ে HTTP Version (1.1) তার পরের লাইনে HTTP Header। আমাদের বেলায় ব্রাউজার একগাদা হেডার পাঠিয়েছে এবার দেখি আমাদের সার্ভার কি উত্তর দিয়েছিল: 1Server said b'HTTP/1.1 200 OK\\r\\n\\nHello, World!' আবার সব HTTP Response এই ফরম্যাটে লেখা লাগে শুরুতেই থাকে HTTP Version তারপর একটা স্পেস দিয়ে Status Code তার পরের লাইনে HTTP Header যদি থাকে তারপর এক লাইন গ্যাপ দিয়ে Response Body। স্ট্যাটাস কোড আমাদের বুঝায় সার্ভার ঠিকঠাক উত্তর দিয়েছে কিনা। যেমন এক্ষেত্রে সার্ভার “ওকে”। সার্ভার যদি ঠিকঠাক উত্তর দিতে না পারে তাহলে অন্য স্ট্যাটাস রিটার্ন করতে পারে। আমাদের পরিচিত একটা স্ট্যাটাস হচ্ছে 500 Internel Server Error আরো জানতে: URL: https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_URL HTTP Overview https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/blog/2018/3/what-is-web-server/"},{"title":"Debug a PHP application running in Docker with VS Code and Xdebug","text":"I don’t have much experience with PHP. Working on a pet project, I used Docker to do the heavy lifting of setting up a development environment for me. But I struggled to find a good resource on how to setup up step by step debugging. So where is how I ended up doing it, hope it helps someone! Setup your containerXdebug is a PHP extension that needs to be installed on your container. We need install and set it up inside our Docker container so that it can connect to a debug client running on the host machine. Configure PHP to use Xdebug and enable remote debuggingCreate a config file named xdebug.ini that we will copy into Docker’s /usr/local/etc/php/conf.d.Here is a sample one: 123456zend_extension=xdebug[xdebug]xdebug.mode=develop,debugxdebug.client_host=host.docker.internalxdebug.start_with_request=yes For more details see docs here. Notice that we are setting host.docker.internal as host of our debug client. We will define this host when we run our container. Error reporting configCreate a error reporting config file error_reporting.ini with following content: 1error_reporting=E_ALL We will also copy this into Docker’s /usr/local/etc/php/conf.d. Install and enable XdebugCreate or update your Dockerfile to install Xdebug and copy over the files created above.Depending on your image, you might need to change how you install Xdebug. Example: 12345678910111213# syntax=docker/dockerfile:1FROM php:7.1.8-apache# install xdebugRUN pecl install xdebug# copy over the config filesCOPY ./xdebug.ini /usr/local/etc/php/conf.d/docker-php-ext-xdebug.iniCOPY ./error_reporting.ini /usr/local/etc/php/conf.d/error_reporting.ini# enable the extensionRUN docker-php-ext-enable xdebug Notice that we are enabling Xdebug with docker-php-ext-enable. You might need to restart your webserver to reload the settings. Start your containerWe need to make sure our container can communicate with the host via host.docker.internal. This won’t work automatically, we need to provide the following run flag: 1--add-host=host.docker.internal:host-gateway Alternatively we can do so using docker-compose and extra_hosts.For example: 1234567891011version: '3.1'services: app: build: . ports: - 8000:80 extra_hosts: - \"host.docker.internal:host-gateway\" volumes: - ./app:/var/www/html Install an Extension (PHP Debug Adapter) in VS CodeNow we need a debug adapter between VS Code and Xdebug. We will use PHP Debug. To install in VS Code: Press F1, type ext install php-debug and hit enter key. Configure VS Code to map files on hostTo make VS Code map the files on the Docker container to the right files on our host, we have to set the pathMappings settings in our .vscode/launch.json. A sample one: 123456789101112131415161718{ \"version\": \"0.2.0\", \"configurations\": [ { \"name\": \"Launch\", \"type\": \"php\", \"request\": \"launch\", \"port\": 9003, // default for Xdebug 3 \"log\": true, // server -&gt; local // just the opposite of your bound volumes \"pathMappings\": { \"/var/www/html/\": \"${workspaceRoot}/app\", }, } ]} See the docs to learn more about the launch settings. Now go debug!Now go set up some break points in you code (mapped above in pathMappings) and start the “Launch” from VS Code’s debugger and hit the green play button! document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/blog/2021/9/xdebug-vscode-docker/"},{"title":"STL Cheat Sheet - C++ vs Java","text":"Standard modules are implemented differently or same things are done differently in different languages. One says add() while another says push_back(). This is a cheatsheet for myself to remember how to do things in diffrent languages. I made this when I was a fresh grad and used to use both C++ and Java to solve problems. Hope this helps someone. Feel free to recommend modifications or add things. @import url('https://themes.googleusercontent.com/fonts/css?kit=lhDjYqiy3mZ0x6ROQEUoUw');ol{margin:0;padding:0}table td,table th{padding:0}.c6{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:173.2pt;border-top-color:#000000;border-bottom-style:solid}.c3{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:90.8pt;border-top-color:#000000;border-bottom-style:solid}.c8{border-right-style:solid;padding:5pt 5pt 5pt 5pt;border-bottom-color:#000000;border-top-width:1pt;border-right-width:1pt;border-left-color:#000000;vertical-align:top;border-right-color:#000000;border-left-width:1pt;border-top-style:solid;border-left-style:solid;border-bottom-width:1pt;width:179.2pt;border-top-color:#000000;border-bottom-style:solid}.c0{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:\"Consolas\";font-style:normal}.c9{color:#000000;font-weight:400;text-decoration:none;vertical-align:baseline;font-size:11pt;font-family:\"Arial\";font-style:normal}.c2{padding-top:0pt;padding-bottom:0pt;line-height:1.15;orphans:2;widows:2;text-align:left}.c10{color:#000000;text-decoration:none;vertical-align:baseline;font-style:normal}.c12{border-spacing:0;border-collapse:collapse;margin-right:auto}.c25{text-decoration-skip-ink:none;-webkit-text-decoration-skip:none;color:#1155cc;text-decoration:underline}.c5{font-size:7pt;font-family:\"Times New Roman\";font-weight:400}.c19{background-color:#ffffff;max-width:468pt;padding:72pt 72pt 72pt 72pt}.c1{font-weight:400;font-family:\"Consolas\"}.c14{color:inherit;text-decoration:inherit}.c7{background-color:#ffffff;font-size:10pt}.c13{height:195pt}.c22{height:130pt}.c21{height:133pt}.c18{height:64pt}.c16{height:76pt}.c20{height:169pt}.c17{font-size:10pt}.c24{height:100pt}.c4{height:11pt}.c15{height:25pt}.c23{height:154pt}.c11{height:184pt}.title{padding-top:0pt;color:#000000;font-size:26pt;padding-bottom:3pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}.subtitle{padding-top:0pt;color:#666666;font-size:15pt;padding-bottom:16pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}li{color:#000000;font-size:11pt;font-family:\"Arial\"}p{margin:0;color:#000000;font-size:11pt;font-family:\"Arial\"}h1{padding-top:20pt;color:#000000;font-size:20pt;padding-bottom:6pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h2{padding-top:18pt;color:#000000;font-size:16pt;padding-bottom:6pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h3{padding-top:16pt;color:#434343;font-size:14pt;padding-bottom:4pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h4{padding-top:14pt;color:#666666;font-size:12pt;padding-bottom:4pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h5{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;orphans:2;widows:2;text-align:left}h6{padding-top:12pt;color:#666666;font-size:11pt;padding-bottom:4pt;font-family:\"Arial\";line-height:1.15;page-break-after:avoid;font-style:italic;orphans:2;widows:2;text-align:left} TopicC++JavaList-&nbsp; &nbsp;vector &lt;int&gt; v;-&nbsp; &nbsp;v.push_back(10);-&nbsp; &nbsp;v.pop_back();-&nbsp; &nbsp;v.size();-&nbsp; &nbsp;v.empty();-&nbsp; &nbsp;v.at(0)/v[0]-&nbsp; &nbsp;ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();-&nbsp; &nbsp;list.add(10);Sort/Reverse Array-&nbsp; &nbsp;sort/reverse(arr, arr+n)-&nbsp; &nbsp;sort/reverse(arr, arr+n, comp)-&nbsp; &nbsp;Arrays.sort()-&nbsp; &nbsp;No reverse of ArraySort/Reverse List-&nbsp; &nbsp;sort/reverse(v.begin(), v,end())-&nbsp; &nbsp; Collections.sort/reverse(list)-&nbsp; &nbsp;Collections.sort(list, Collections.reverseOrder());-&nbsp; &nbsp;Collections.sort(al, new MyComparator());Comparatorbool function(T a, T b){&nbsp; return a &lt; b;}class MyComparator&nbsp;implements Comparator&lt;T&gt;{&nbsp; &nbsp; public int compare(T a, T b){return a.val - b.val;}}Operator Overloadingbool operator &lt; (T other) const {}// oops, no such thingclass T implements Comparable &lt;T&gt; {&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Override&nbsp; &nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public int compareTo(T ob) { return Integer.compare(T.val, this.val);}&nbsp;};Iteratorfor(vector&lt;int&gt;::iterator i=v.begin(); i!=v.end(); i++) {&nbsp; cout &lt;&lt; *i &lt;&lt; endl;&nbsp; cout &lt;&lt; i-&gt;val &lt;&lt; endl;}for(Integer i : list) {}SetAuto Sorted!-&nbsp; &nbsp;set &lt;int&gt; s;-&nbsp; &nbsp;s.insert(10);&nbsp;Queue-&nbsp; &nbsp;queue &lt;int&gt; q;-&nbsp; &nbsp;q.push(10)-&nbsp; &nbsp;q.pop()-&nbsp; &nbsp;q.front()-&nbsp; &nbsp;q.back()-&nbsp; &nbsp;Queue&lt;Integer&gt; q = new LinkedList&lt;&gt;();-&nbsp; &nbsp;q.add(10);-&nbsp; &nbsp;q.remove();-&nbsp; &nbsp;q.peek();-&nbsp; &nbsp;q.size();-&nbsp; &nbsp;q.isEmpty();Priority Queue-&nbsp; &nbsp;Object must be comparable-&nbsp; &nbsp;priority_queue &lt;int&gt; q;-&nbsp; &nbsp;q.push(10)-&nbsp; &nbsp;q.pop()-&nbsp; &nbsp;q.top()-&nbsp; &nbsp;q.empty()-&nbsp; &nbsp;Object must be comparable-&nbsp; &nbsp;Queue&lt;Integer&gt; q = new PriorityQueue&lt;Integer&gt;();-&nbsp; &nbsp;q.add(10);-&nbsp; &nbsp;q.remove();-&nbsp; &nbsp;q.peek();-&nbsp; &nbsp;q.size();-&nbsp; &nbsp;q.isEmpty();Stack-&nbsp; &nbsp;stack &lt;int&gt; s;-&nbsp; &nbsp;s.push(10);-&nbsp; &nbsp;s.pop(); // no return-&nbsp; &nbsp;s.top()-&nbsp; &nbsp;s.size()-&nbsp; &nbsp;s.empty()-&nbsp; &nbsp;Stack&lt;Integer&gt; s = new Stack&lt;Integer&gt;();-&nbsp; &nbsp;s.push(10);-&nbsp; &nbsp;s.pop()-&nbsp; &nbsp;s.peek()-&nbsp; &nbsp;s.empty()String-&nbsp; &nbsp;str [0]-&nbsp; &nbsp;str.at(0)-&nbsp; &nbsp;str.length()&nbsp;&nbsp; document.querySelectorAll('.not-gallery-item') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });","link":"/blog/2018/1/stl-cheat-sheet/"}],"tags":[{"name":"devops","slug":"devops","link":"/blog/tags/devops/"},{"name":"hackathon","slug":"hackathon","link":"/blog/tags/hackathon/"},{"name":"python","slug":"python","link":"/blog/tags/python/"},{"name":"clean code","slug":"clean-code","link":"/blog/tags/clean-code/"},{"name":"ubuntu","slug":"ubuntu","link":"/blog/tags/ubuntu/"},{"name":"docker","slug":"docker","link":"/blog/tags/docker/"},{"name":"automattic","slug":"automattic","link":"/blog/tags/automattic/"},{"name":"algorithm","slug":"algorithm","link":"/blog/tags/algorithm/"},{"name":"simulation","slug":"simulation","link":"/blog/tags/simulation/"},{"name":"os161","slug":"os161","link":"/blog/tags/os161/"},{"name":"web","slug":"web","link":"/blog/tags/web/"},{"name":"http","slug":"http","link":"/blog/tags/http/"},{"name":"php","slug":"php","link":"/blog/tags/php/"},{"name":"cheatsheet","slug":"cheatsheet","link":"/blog/tags/cheatsheet/"},{"name":"java","slug":"java","link":"/blog/tags/java/"},{"name":"cpp","slug":"cpp","link":"/blog/tags/cpp/"}],"categories":[{"name":"Tips","slug":"Tips","link":"/blog/categories/Tips/"},{"name":"Interviews","slug":"Interviews","link":"/blog/categories/Interviews/"},{"name":"Tutorial","slug":"Tutorial","link":"/blog/categories/Tutorial/"},{"name":"Interview Experience","slug":"Interview-Experience","link":"/blog/categories/Interview-Experience/"},{"name":"Algorithm","slug":"Algorithm","link":"/blog/categories/Algorithm/"},{"name":"Academic","slug":"Academic","link":"/blog/categories/Academic/"},{"name":"Cheatsheet","slug":"Cheatsheet","link":"/blog/categories/Cheatsheet/"}]}