{"version":3,"sources":["webpack:///./src/pages/resume.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./src/components/layouts/Navbar.js","webpack:///./src/components/seo/Facebook.jsx","webpack:///./src/components/seo/Twitter.jsx","webpack:///./src/components/seo/SEO.jsx","webpack:///./.cache/public-page-renderer-prod.js"],"names":["Resume","render","_this","this","props","location","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","gatsby__WEBPACK_IMPORTED_MODULE_4__","query","site","siteMetadata","siteUrl","Fragment","_components_seo_SEO__WEBPACK_IMPORTED_MODULE_3__","article","title","desc","pathname","_components_layouts_Navbar__WEBPACK_IMPORTED_MODULE_5__","src","frameBorder","style","position","overflow","width","height","data","_public_static_d_2869746472_json__WEBPACK_IMPORTED_MODULE_1__","React","Component","__webpack_require__","d","__webpack_exports__","StaticQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","gatsby_link__WEBPACK_IMPORTED_MODULE_2__","gatsby_link__WEBPACK_IMPORTED_MODULE_2___default","StaticQueryContext","createContext","Consumer","staticQueryData","children","propTypes","PropTypes","object","string","isRequired","func","m","module","exports","require","default","links","to","icon","Navbar","react__WEBPACK_IMPORTED_MODULE_1___default","className","map","link","gatsby__WEBPACK_IMPORTED_MODULE_2__","key","Facebook","_ref","url","type","image","fbAppId","react_default","Helmet_default","property","content","defaultProps","Twitter","username","name","SEO","_this$props","banner","gatsby_browser_entry","_props$site","buildTime","_props$site$siteMetad","defaultTitle","titleAlt","shortName","author","siteLanguage","logo","pathPrefix","defaultDescription","description","defaultBanner","twitter","seo","schemaOrgJSONLD","@context","@type","@id","alternateName","headline","datePublished","dateModified","publisher","isPartOf","mainEntityOfPage","lang","JSON","stringify","seo_Facebook","seo_Twitter","_2757271287","bool","ProdPageRenderer","pageResources","loader","getResourcesForPathnameSync","InternalPageRenderer","Object","assign","json","shape"],"mappings":"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","file":"component---src-pages-resume-js-55d1e2c63102168ee915.js","sourcesContent":["import React from 'react'\nimport SEO from '../components/seo/SEO'\nimport { StaticQuery, graphql } from 'gatsby'\nimport Navbar from '../components/layouts/Navbar'\n\nexport default class Resume extends React.Component {\n  render() {\n    const { location } = this.props\n    let pdfUrl =\n      'https://mehamasum.github.io/docs/Resume_Mehedi-Hasan-Masum_CSEDU.pdf'\n\n    return (\n      <StaticQuery\n        query={query}\n        render={props => {\n          const {\n            site: {\n              siteMetadata: { siteUrl },\n            },\n          } = props\n\n          return (\n            <React.Fragment>\n              <SEO\n                article={false}\n                title={`Meha Masum's Resume`}\n                desc={`Mehedi Hasan Masum's Resume | PDF Download`}\n                pathname={this.props.location.pathname}\n              />\n\n              <Navbar location={this.props.location} />\n\n              <iframe\n                src={`https://docs.google.com/viewer?url=${pdfUrl}&embedded=true`}\n                frameBorder=\"0\"\n                style={{\n                  position: 'absolute',\n                  overflow: 'hidden',\n                  width: '100%',\n                  height: '100%',\n                }}\n              />\n            </React.Fragment>\n          )\n        }}\n      />\n    )\n  }\n}\n\nconst query = graphql`\n  query Resume {\n    site {\n      siteMetadata {\n        siteUrl\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\n\nconst StaticQueryContext = React.createContext({})\n\nconst StaticQuery = props => (\n  <StaticQueryContext.Consumer>\n    {staticQueryData => {\n      if (\n        props.data ||\n        (staticQueryData[props.query] && staticQueryData[props.query].data)\n      ) {\n        return (props.render || props.children)(\n          props.data ? props.data.data : staticQueryData[props.query].data\n        )\n      } else {\n        return <div>Loading (StaticQuery)</div>\n      }\n    }}\n  </StaticQueryContext.Consumer>\n)\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport { Row, Col } from 'react-bootstrap'\nimport '../../styles/navbar.scss'\n\nconst links = [\n  {\n    to: '/',\n    title: 'About',\n    icon: 'fa-info-circle',\n  },\n  {\n    to: '/blog',\n    title: 'Blog',\n    icon: 'fa-rss',\n  },\n  {\n    to: '/books',\n    title: 'Books',\n    icon: 'fa-book',\n  },\n  {\n    to: '/resume',\n    title: 'Resume',\n    icon: 'fa-print',\n  },\n]\n\nclass Navbar extends React.Component {\n  render() {\n    const { location } = this.props\n    return (\n      <header className=\"header\">\n        <div className=\"container\">\n          <div className=\"nav-links\">\n            {links.map(link => (\n              <Link\n                key={link.to}\n                to={link.to}\n                title={link.title}\n                className={\n                  location && location.pathname === link.to ? 'active' : null\n                }\n              >\n                {link.title}\n              </Link>\n            ))}\n          </div>\n        </div>\n      </header>\n    )\n  }\n}\n\nexport default Navbar\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport Helmet from 'react-helmet'\n\nconst Facebook = ({ url, type, title, desc, image, fbAppId }) => (\n  <Helmet>\n    {fbAppId && <meta property=\"fb:app_id\" content={fbAppId} />}\n    {url && <meta property=\"og:url\" content={url} />}\n    {type && <meta property=\"og:type\" content={type} />}\n    {title && <meta property=\"og:title\" content={title} />}\n    {desc && <meta property=\"og:description\" content={desc} />}\n    {image && <meta property=\"og:image\" content={image} />}\n  </Helmet>\n)\n\nexport default Facebook\n\nFacebook.propTypes = {\n  url: PropTypes.string,\n  type: PropTypes.string,\n  title: PropTypes.string,\n  desc: PropTypes.string,\n  image: PropTypes.string,\n}\n\nFacebook.defaultProps = {\n  url: null,\n  type: null,\n  title: null,\n  desc: null,\n  image: null,\n}\n","import PropTypes from 'prop-types'\nimport React from 'react'\nimport Helmet from 'react-helmet'\n\nconst Twitter = ({ type, username, title, desc, image }) => (\n  <Helmet>\n    <meta name=\"twitter:card\" content={type} />\n    {username && <meta name=\"twitter:site\" content={username} />}\n    {username && <meta name=\"twitter:creator\" content={username} />}\n    {title && <meta name=\"twitter:title\" content={title} />}\n    {desc && <meta name=\"twitter:description\" content={desc} />}\n    {image && <meta name=\"twitter:image\" content={image} />}\n    {image && <meta name=\"twitter:image:alt\" content={title} />}\n  </Helmet>\n)\n\nexport default Twitter\n\nTwitter.propTypes = {\n  type: PropTypes.string,\n  username: PropTypes.string,\n  title: PropTypes.string,\n  desc: PropTypes.string,\n  image: PropTypes.string,\n}\n\nTwitter.defaultProps = {\n  type: 'summary_large_image',\n  username: null,\n  title: null,\n  desc: null,\n  image: null,\n}\n","import React, { Component } from 'react'\nimport Helmet from 'react-helmet'\nimport PropTypes from 'prop-types'\nimport { StaticQuery, graphql } from 'gatsby'\nimport Facebook from './Facebook'\nimport Twitter from './Twitter'\n\nexport default class SEO extends Component {\n  render() {\n    const { title, desc, banner, pathname, article } = this.props\n    return (\n      <StaticQuery\n        query={query}\n        render={props => {\n          const {\n            site: {\n              buildTime,\n              siteMetadata: {\n                title: defaultTitle,\n                titleAlt,\n                shortName,\n                author,\n                siteLanguage,\n                logo,\n                siteUrl,\n                pathPrefix,\n                description: defaultDescription,\n                banner: defaultBanner,\n                twitter,\n                fbAppId,\n              },\n            },\n          } = props\n\n          const seo = {\n            title: title || defaultTitle,\n            description: defaultDescription || desc,\n            image: `${siteUrl}${banner || defaultBanner}`,\n            url: `${siteUrl}${pathname || '/'}`,\n          }\n\n          const realPrefix = pathPrefix === '/' ? '' : pathPrefix\n\n          let schemaOrgJSONLD = [\n            {\n              '@context': 'http://schema.org',\n              '@type': 'WebSite',\n              '@id': siteUrl,\n              url: siteUrl,\n              name: defaultTitle,\n              alternateName: titleAlt || '',\n            },\n          ]\n\n          if (article) {\n            schemaOrgJSONLD = [\n              {\n                '@context': 'http://schema.org',\n                '@type': 'BlogPosting',\n                '@id': seo.url,\n                url: seo.url,\n                name: title,\n                alternateName: titleAlt || '',\n                headline: title,\n                image: {\n                  '@type': 'ImageObject',\n                  url: seo.image,\n                },\n                description: seo.description,\n                datePublished: buildTime,\n                dateModified: buildTime,\n                author: {\n                  '@type': 'Person',\n                  name: author,\n                },\n                publisher: {\n                  '@type': 'Organization',\n                  name: author,\n                  logo: {\n                    '@type': 'ImageObject',\n                    url: siteUrl + realPrefix + logo,\n                  },\n                },\n                isPartOf: siteUrl,\n                mainEntityOfPage: {\n                  '@type': 'WebSite',\n                  '@id': siteUrl,\n                },\n              },\n            ]\n          }\n\n          return (\n            <React.Fragment>\n              <Helmet title={seo.title}>\n                <html lang={siteLanguage} />\n                <meta name=\"description\" content={seo.description} />\n                <meta name=\"image\" content={seo.image} />\n                <meta name=\"apple-mobile-web-app-title\" content={shortName} />\n                <meta name=\"application-name\" content={shortName} />\n                <script type=\"application/ld+json\">\n                  {JSON.stringify(schemaOrgJSONLD)}\n                </script>\n              </Helmet>\n              <Facebook\n                desc={seo.description}\n                image={seo.image}\n                title={seo.title}\n                type={article ? 'article' : 'website'}\n                url={seo.url}\n                fbAppId={fbAppId}\n              />\n              <Twitter\n                title={seo.title}\n                image={seo.image}\n                desc={seo.description}\n                username={twitter}\n              />\n            </React.Fragment>\n          )\n        }}\n      />\n    )\n  }\n}\n\nSEO.propTypes = {\n  title: PropTypes.string,\n  desc: PropTypes.string,\n  banner: PropTypes.string,\n  pathname: PropTypes.string,\n  article: PropTypes.bool,\n}\n\nSEO.defaultProps = {\n  title: null,\n  desc: null,\n  banner: null,\n  pathname: null,\n  article: false,\n}\n\nconst query = graphql`\n  query SEO {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD\")\n      siteMetadata {\n        defaultTitle: title\n        titleAlt\n        shortName\n        author\n        siteLanguage\n        logo\n        siteUrl: url\n        pathPrefix\n        defaultDescription: description\n        defaultBanner: banner\n        twitter\n        fbAppId\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\nimport loader from \"./loader\"\n\nconst ProdPageRenderer = ({ location }) => {\n  const pageResources = loader.getResourcesForPathnameSync(location.pathname)\n  if (!pageResources) {\n    return null\n  }\n\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n"],"sourceRoot":""}