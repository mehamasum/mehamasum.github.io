{"version":3,"sources":["webpack:///./src/templates/ListCategoryTemplate.js","webpack:///./src/components/Breadcrumb/Breadcrumb.js"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_PostList_BlogList__WEBPACK_IMPORTED_MODULE_1__","_components_Breadcrumb_Breadcrumb__WEBPACK_IMPORTED_MODULE_2__","ListCategoryTemplate","props","category","pageContext","totalCount","data","allMarkdownRemark","heading","a","createElement","location","topContent","Fragment","links","url","label","gatsby__WEBPACK_IMPORTED_MODULE_1__","className","style","margin","slice","length","map","link","index","key","to"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,8BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,KAAAS,EAAAT,EAAA,KA0CeU,UArCc,SAAAC,GAAS,IAC5BC,EAAaD,EAAME,YAAnBD,SACAE,EAAeH,EAAMI,KAAKC,kBAA1BF,WACFG,EAAaH,EAAN,SACI,IAAfA,EAAmB,GAAK,KADb,QAELF,EAFK,IAIb,OACEN,EAAAY,EAAAC,cAACX,EAAA,EAAD,CACEO,KAAMJ,EAAMI,KACZF,YAAaF,EAAME,YACnBO,SAAUT,EAAMS,SAChBC,WACEf,EAAAY,EAAAC,cAACb,EAAAY,EAAMI,SAAP,KACEhB,EAAAY,EAAAC,cAACV,EAAA,EAAD,CACEc,MAAO,CACL,CACEC,IAAK,IACLC,MAAO,QAET,CACED,IAAK,QACLC,MAAO,QAET,CACED,IAAK,IACLC,MAAK,iBAAmBb,EAAnB,QAIXN,EAAAY,EAAAC,cAAA,UAAKF,OASR,IAAMb,EAAS,+CC5CtB,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAqB,EAAA1B,EAAA,KAAAA,EAAA,KAIeE,EAAA,WAAAS,GAAS,IACdY,EAAUZ,EAAVY,MAER,OACEjB,EAAAY,EAAAC,cAAA,MAAIQ,UAAU,sBAAsBC,MAAO,CAAEC,OAAQ,IAClDN,EAAMO,MAAM,EAAGP,EAAMQ,OAAS,GAAGC,IAAI,SAACC,EAAMC,GAAP,OACpC5B,EAAAY,EAAAC,cAAA,MAAIQ,UAAU,iBAAiBQ,IAAKD,GAClC5B,EAAAY,EAAAC,cAACO,EAAA,KAAD,CAAMU,GAAIH,EAAKT,KAAMS,EAAKR,OAD5B,IAEEnB,EAAAY,EAAAC,cAAA,KAAGQ,UAAU,yBAGjBrB,EAAAY,EAAAC,cAAA,MAAIQ,UAAU,kBAAkBJ,EAAMA,EAAMQ,OAAS,GAAGN","file":"component---src-templates-list-category-template-js-c1709d370a3b90e67cfd.js","sourcesContent":["import React from 'react'\nimport { graphql } from 'gatsby'\nimport BlogList from '../components/PostList/BlogList'\nimport Breadcrumb from '../components/Breadcrumb/Breadcrumb'\n\nconst ListCategoryTemplate = props => {\n  const { category } = props.pageContext\n  const { totalCount } = props.data.allMarkdownRemark\n  const heading = `${totalCount} post${\n    totalCount === 1 ? '' : 's'\n  } in \"${category}\"`\n\n  return (\n    <BlogList\n      data={props.data}\n      pageContext={props.pageContext}\n      location={props.location}\n      topContent={\n        <React.Fragment>\n          <Breadcrumb\n            links={[\n              {\n                url: '/',\n                label: 'root',\n              },\n              {\n                url: '/blog',\n                label: 'blog',\n              },\n              {\n                url: '#',\n                label: `all posts in \"${category}\"`,\n              },\n            ]}\n          />\n          <h2>{heading}</h2>\n        </React.Fragment>\n      }\n    />\n  )\n}\n\nexport default ListCategoryTemplate\n\nexport const pageQuery = graphql`\n  query($category: String, $limit: Int!, $skip: Int!) {\n    site {\n      siteMetadata {\n        title\n        description\n        blogTitle\n        blogSlogan\n      }\n    }\n\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { category: { eq: $category } } }\n      limit: $limit\n      skip: $skip\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          excerpt\n          fields {\n            slug\n          }\n          timeToRead\n          frontmatter {\n            date(formatString: \"MMMM DD, YYYY\")\n            title\n            tags\n            category\n            thumbnail\n            spoiler\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport '../../styles/index.scss'\n\nexport default props => {\n  const { links } = props\n\n  return (\n    <ul className=\"unorderedList badge\" style={{ margin: 0 }}>\n      {links.slice(0, links.length - 1).map((link, index) => (\n        <li className=\"inlineListItem\" key={index}>\n          <Link to={link.url}>{link.label}</Link>&nbsp;\n          <i className=\"fa fa-angle-right\" />\n        </li>\n      ))}\n      <li className=\"inlineListItem\">{links[links.length - 1].label}</li>\n    </ul>\n  )\n}\n"],"sourceRoot":""}