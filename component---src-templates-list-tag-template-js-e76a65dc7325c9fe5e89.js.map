{"version":3,"sources":["webpack:///./src/templates/ListTagTemplate.js","webpack:///./src/components/Breadcrumb.js"],"names":["__webpack_require__","r","__webpack_exports__","d","pageQuery","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_components_Breadcrumb__WEBPACK_IMPORTED_MODULE_1__","_components_BlogList__WEBPACK_IMPORTED_MODULE_2__","ListTagTemplate","props","console","log","tag","pageContext","totalCount","data","allMarkdownRemark","tagHeader","a","createElement","location","topContent","Fragment","links","url","label","gatsby__WEBPACK_IMPORTED_MODULE_1__","className","slice","length","map","link","index","key","to"],"mappings":"2FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,8BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,KAAAS,EAAAT,EAAA,KA2CeU,UAtCS,SAAAC,GACtBC,QAAQC,IAAIF,GADmB,IAEvBG,EAAQH,EAAMI,YAAdD,IACAE,EAAeL,EAAMM,KAAKC,kBAA1BF,WACFG,EAAeH,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEF,EAFF,IAIf,OACER,EAAAc,EAAAC,cAACZ,EAAA,EAAD,CACEQ,KAAMN,EAAMM,KACZF,YAAaJ,EAAMI,YACnBO,SAAUX,EAAMW,SAChBC,WACEjB,EAAAc,EAAAC,cAACf,EAAAc,EAAMI,SAAP,KACElB,EAAAc,EAAAC,cAACb,EAAA,EAAD,CACEiB,MAAO,CACL,CACEC,IAAK,IACLC,MAAO,QAET,CACED,IAAK,QACLC,MAAO,QAET,CACED,IAAK,IACLC,MAAK,gBAAkBb,EAAlB,QAIXR,EAAAc,EAAAC,cAAA,UAAKF,OASR,IAAMf,EAAS,+CC7CtB,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAuB,EAAA5B,EAAA,KAAAA,EAAA,KAIeE,EAAA,WAAAS,GAAS,IACdc,EAAUd,EAAVc,MAER,OACEnB,EAAAc,EAAAC,cAAA,MAAIQ,UAAU,uBACXJ,EAAMK,MAAM,EAAGL,EAAMM,OAAS,GAAGC,IAAI,SAACC,EAAMC,GAAP,OACpC5B,EAAAc,EAAAC,cAAA,MAAIQ,UAAU,iBAAiBM,IAAKD,GAClC5B,EAAAc,EAAAC,cAACO,EAAA,KAAD,CAAMQ,GAAIH,EAAKP,KAAMO,EAAKN,OAD5B,IAEErB,EAAAc,EAAAC,cAAA,KAAGQ,UAAU,yBAGjBvB,EAAAc,EAAAC,cAAA,MAAIQ,UAAU,kBAAkBJ,EAAMA,EAAMM,OAAS,GAAGJ","file":"component---src-templates-list-tag-template-js-e76a65dc7325c9fe5e89.js","sourcesContent":["import React from 'react'\r\nimport { graphql } from 'gatsby'\r\nimport Breadcrumb from '../components/Breadcrumb'\r\nimport BlogList from '../components/BlogList'\r\n\r\nconst ListTagTemplate = props => {\r\n  console.log(props)\r\n  const { tag } = props.pageContext\r\n  const { totalCount } = props.data.allMarkdownRemark\r\n  const tagHeader = `${totalCount} post${\r\n    totalCount === 1 ? '' : 's'\r\n  } tagged with \"${tag}\"`\r\n\r\n  return (\r\n    <BlogList\r\n      data={props.data}\r\n      pageContext={props.pageContext}\r\n      location={props.location}\r\n      topContent={\r\n        <React.Fragment>\r\n          <Breadcrumb\r\n            links={[\r\n              {\r\n                url: '/',\r\n                label: 'root',\r\n              },\r\n              {\r\n                url: '/blog',\r\n                label: 'blog',\r\n              },\r\n              {\r\n                url: '#',\r\n                label: `tagged with \"${tag}\"`,\r\n              },\r\n            ]}\r\n          />\r\n          <h1>{tagHeader}</h1>\r\n        </React.Fragment>\r\n      }\r\n    />\r\n  )\r\n}\r\n\r\nexport default ListTagTemplate\r\n\r\nexport const pageQuery = graphql`\r\n  query($tag: String, $limit: Int!, $skip: Int!) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n        blogTitle\r\n        blogSlogan\r\n      }\r\n    }\r\n\r\n    allMarkdownRemark(\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { tags: { in: [$tag] } } }\r\n      limit: $limit\r\n      skip: $skip\r\n    ) {\r\n      totalCount\r\n      edges {\r\n        node {\r\n          id\r\n          excerpt\r\n          fields {\r\n            slug\r\n          }\r\n          timeToRead\r\n          frontmatter {\r\n            date(formatString: \"MMMM DD, YYYY\")\r\n            title\r\n            tags\r\n            category\r\n            thumbnail\r\n            spoiler\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`\r\n","import React from 'react'\r\nimport { Link } from 'gatsby'\r\nimport '../styles/index.scss'\r\n\r\nexport default props => {\r\n  const { links } = props\r\n\r\n  return (\r\n    <ul className=\"unorderedList badge\">\r\n      {links.slice(0, links.length - 1).map((link, index) => (\r\n        <li className=\"inlineListItem\" key={index}>\r\n          <Link to={link.url}>{link.label}</Link>&nbsp;\r\n          <i className=\"fa fa-angle-right\" />\r\n        </li>\r\n      ))}\r\n      <li className=\"inlineListItem\">{links[links.length - 1].label}</li>\r\n    </ul>\r\n  )\r\n}\r\n"],"sourceRoot":""}