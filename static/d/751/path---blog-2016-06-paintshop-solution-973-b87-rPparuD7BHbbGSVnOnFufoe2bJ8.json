{"data":{"site":{"siteMetadata":{"title":"Meha Masum","author":"Meha Masum","fbAppId":"575960529519073","blogTitle":"Learning in public","blogSlogan":"Meha Masum's Personal Blog","siteUrl":"https://mehamasum.github.io"}},"markdownRemark":{"id":"ba1e524a-8d7e-5bcf-9357-5a2af6c6492b","timeToRead":2,"excerpt":"Problem description can be found here (Part 3: Paint shop synchronization)In this article I‚Äôm going to assume:You have already set up and‚Ä¶","html":"<p>Problem description can be found <a href=\"https://cgi.cse.unsw.edu.au/~cs3231/14s1/assignments/asst1/\">here</a> (Part 3: Paint shop synchronization)</p>\n<p>In this article <strong>I‚Äôm going to assume</strong>:</p>\n<ul>\n<li>You have already set up and run OS/161</li>\n<li>You have a clear understanding how threads work</li>\n<li>You already understand binary and counting semaphores, now it‚Äôs time to use them to solve this problem</li>\n</ul>\n<hr>\n<h2 id=\"main-idea\"><a href=\"#main-idea\" aria-label=\"main idea permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Main Idea</h2>\n<p>The basic task is to make the paint shop run properly.\nThis is a modified version of classic <strong>Bounded Buffer Problem</strong> and the problem is very realistic.</p>\n<p>We kept two different buffers, one buffer for placing orders and another buffer for shipping the processed color cans.</p>\n<p>Customers come and place their order in FIFO basis (or randomly) in the order buffer. After that they keep searching the shipment buffer for the arrival of their can having the proper color combination.</p>\n<p>Staffs keep checking the order buffer for orders. After getting an order, they fill it with demanded color combination and finally place the ready can in the shipment buffer.</p>\n<p>So, to summarize, here is what is going to happen:</p>\n<ol>\n<li>The first idea that comes to mind is that, the customers will come and put their cans in a buffer, lets call it <code class=\"language-text\">order_buffer</code>.</li>\n<li>Stuffs will pick up cans from the <code class=\"language-text\">order_buffer</code> and fill with color.</li>\n<li>Then they would put the can in another buffer, lets call it <code class=\"language-text\">shipment_buffer</code>.</li>\n<li>Finally the customers can take back their can from <code class=\"language-text\">shipment_buffer</code>.</li>\n</ol>\n<h2 id=\"semaphores\"><a href=\"#semaphores\" aria-label=\"semaphores permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Semaphores</h2>\n<p>We have used different semaphores to make sure that:</p>\n<ol>\n<li>No two customer try to use the <code class=\"language-text\">order_buffer</code> at the same time</li>\n<li>No two stuff try to use the <code class=\"language-text\">shipment_buffer</code> at the same time</li>\n<li>Neither of the buffers gets overflowed or under-flowed</li>\n</ol>\n<p>This is quite an easy code to write, but the tricky part is to find out why the deadlocks happen when they happen.</p>\n<p>Another issue is printing the message ‚ÄúStaff x going home after mixing y orders‚Äù. We solved it by making each stuff for fixed period of time so that we can ensure that whoever went home before him reached home by that time. Otherwise this message will be printed in all messed up fashion.</p>\n<h2 id=\"personal-notes-and-code\"><a href=\"#personal-notes-and-code\" aria-label=\"personal notes and code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Personal notes and code</h2>\n<p>I have seen solutions that use <code class=\"language-text\">thread_yield()</code> calls to stop threads. I personally feel that, the task is to utilize the system built semaphores, so using kernel level calls in here is not a good idea.</p>\n<p>In our solution, we made the users put their empty cans in the <code class=\"language-text\">order_buffer</code> at random positions. FIFO could have been done as well, but we preferred a different approach. Besides, random is always fair üòõ</p>\n<p>You may have a look at our solution on <a href=\"https://github.com/mehamasum/OS161-paint-shop\">github</a>. But remember, <strong>the immense joy you would feel once your paint shop runs correctly- will be missed completely</strong> if you decide to copy the code.</p>\n<p>Don‚Äôt give up if you fall in deadlocks, it might take even an entire week to solve the problem!</p>\n<p>Leave your thoughts in comments. Happy coding!</p>\n<hr>\n<p>Featured image credit: <a href=\"https://www.iconfinder.com/icons/1055016/paint_paint_can_icon#size=256\">Nick Roach</a></p>\n<hr>","tableOfContents":"<ul>\n<li><a href=\"/blog/2016/06/paintshop-solution/#main-idea\">Main Idea</a></li>\n<li><a href=\"/blog/2016/06/paintshop-solution/#semaphores\">Semaphores</a></li>\n<li><a href=\"/blog/2016/06/paintshop-solution/#personal-notes-and-code\">Personal notes and code</a></li>\n</ul>","frontmatter":{"title":"OS/161: Paint Shop Synchronization Problem","date":"June 26, 2016","tags":["os161"],"category":"Academic","thumbnail":"https://mehamasum.files.wordpress.com/2016/06/paintshop.png","spoiler":"Ideas (and code) to solve OS/161 Coding Assignment Part 3: Paint shop synchronization."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/blog/2016/06/paintshop-solution/","previousPage":null,"nextPage":{"id":"06c5997c-003d-5033-b93c-126648dc4bf1","excerpt":"This is a common structure of every redux middleware:When I first started, it really intimidated me- what‚Äôs with all those arrows? Then of‚Ä¶","fields":{"slug":"/blog/2018/12/dear-middlewares/"},"timeToRead":9,"frontmatter":{"date":"December 21, 2018","title":"Lets know redux middlewares better","tags":["middleware","reduxjs"],"category":"General","thumbnail":"/images/posts/redux.png","spoiler":"Does redux middleware confuse you? Take a deep breath and read on."}}}}