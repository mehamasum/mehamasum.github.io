{"data":{"site":{"siteMetadata":{"title":"Meha Masum","author":"Meha Masum","fbAppId":"491095678046627","blogTitle":"Learning in public","blogSlogan":"Meha Masum's Personal Blog","siteUrl":"https://860a836e.ngrok.io"}},"markdownRemark":{"id":"8ea69209-465b-5009-a8cb-54cabf2a35f8","timeToRead":4,"excerpt":"In this post firstly we will talk about middlewares in general- what they are and how to write them. If you are familiar with the concept…","html":"<p>In this post firstly we will talk about middlewares in general- what they are and how to write them. If you are familiar with the concept you can start from Redux middlewares.</p>\n<h2 id=\"what-is-middleware\"><a href=\"#what-is-middleware\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is middleware?</h2>\n<p>In general, middleware is some code you can put in between some other code (hence the name).</p>\n<p>For example, when a server-side library receives a request at a particular endpoint, the associated “view” will generate a response in return.</p>\n<p>Now you wish to “log” every request it receives. Instead of logging the request manually in each endpoint’s “view”, you can put a middleware in between the code of receiving a request and generating a response.</p>\n<p>Similarly if you want to parse the “body” of the request you don’t want to do that in every function. You may add a middleware that parses the body of each request so that your “view”s get <em>readymade</em> parsed body.</p>\n<p>Here is conceptual view for this example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">request =&gt; one middleware logs =&gt; another parses its body =&gt; response generator receives a readymade request</code></pre></div>\n<p>There could be many more of those. For example one middleware may check the authtication credentials of the request and put the user id in that request- so that the response generators don’t have to make a DB call themselves.</p>\n<h2 id=\"redux-middleware\"><a href=\"#redux-middleware\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux middleware</h2>\n<p>Redux middleware is conceptually similiar with those of server-side libraries, yet it solves an entirely different problem. Assuming we know nothing about it, let’s start from the begining.</p>\n<blockquote>\n<p>Redux middleware provides a third-party extension point between dispatching an action, and the moment it reaches the reducer.</p>\n</blockquote>\n<p>Let’s think about that for a minute. Like any other middleware, it sits between two points. In this case, between dispatching an action (<code class=\"language-text\">store.dispatch</code> call) and the action reaching the reducers (state update). So here is a conceptual view:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">action dispatch =&gt; middleware =&gt; reducer</code></pre></div>\n<p>Having this goal in mind, think about how can we achieve this? How can we solve the problem without middleware?</p>\n<p>Let’s take a real problem and try to solve it.</p>\n<h3 id=\"problem-1-log-the-state-change\"><a href=\"#problem-1-log-the-state-change\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Problem #1: Log the state change</h3>\n<blockquote>\n<p>One of the benefits of Redux is that it makes state changes predictable and transparent. Every time an action is dispatched, the new state is computed and saved. The state cannot change by itself, it can only change as a consequence of a specific action.</p>\n</blockquote>\n<p>Wouldn’t it be nice if we logged every action that happens in the app, together with the state computed after it? When something goes wrong, we can look back at our log, and figure out which action corrupted the state.</p>\n<p>So it is very obivious that we have to do this for every action we will write:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dispatching'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'next state'</span><span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>But we don’t want to do that- every time we dispatch an action we don’t want to add some <code class=\"language-text\">console.log</code>s.</p>\n<p>So what else can we do?\nWe could write our own version of dispatch and call it every time.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ourDispatch</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dispatching'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n  store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'next state'</span><span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So everytime we want to dispatch an action, we call <code class=\"language-text\">ourDispatch</code> instead of <code class=\"language-text\">store.dispatch</code>. What if a new dev in our team calls <code class=\"language-text\">store.dispatch</code> unintentionally at one place? The action will never be logged.</p>\n<p>So it is obivious that we need to modify <code class=\"language-text\">store.dispatch</code> itself.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> originalDispatch <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>dispatch\nstore<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">dispatch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ourDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dispatching'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> originalReturnValue <span class=\"token operator\">=</span> <span class=\"token function\">originalDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'next state'</span><span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> originalReturnValue\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So what we did there basically?\nWe copied the original version to <code class=\"language-text\">oldDispatch</code>. Then we rewrite it with our own definition. The original one take one argument, so do we. Then we put the log call and then return the <code class=\"language-text\">originalReturnValue</code>. May be we do not know what original dispatch was supposed to return, but we don’t want to polute it’s old signature.</p>\n<p>So we got what we wanted. But this is a bad approach. Because we are modifying things at our will, but we know things should only be <a href=\"https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle\">open for extension and closed for modification</a>. But let’s keep it for a while.</p>\n<p>Now if we want to add error catching behaviour, our code will look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> originalDispatch <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>dispatch\nstore<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">dispatch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ourDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dispatching'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> originalReturnValue <span class=\"token operator\">=</span> <span class=\"token function\">originalDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'next state'</span><span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> originalReturnValue\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> modifiedDispatch <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>dispatch\nstore<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">dispatch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ourNewDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> originalReturnValue <span class=\"token operator\">=</span> <span class=\"token function\">modifiedDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> originalReturnValue\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Caught an exception!'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    Raven<span class=\"token punctuation\">.</span><span class=\"token function\">captureException</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      extra<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        action<span class=\"token punctuation\">,</span>\n        state<span class=\"token punctuation\">:</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throw</span> err\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>The best part of middleware is that it’s composable in a chain. You can use multiple third-party middleware in your project.</p>\n</blockquote>","frontmatter":{"title":"Lets know redux middlewares better","date":"December 21, 2018","tags":["middleware","reduxjs"],"category":"General","thumbnail":"/images/posts/redux.png","spoiler":"A comprehensive overview of redux middlewares and common mistakes people make while writing them"}}},"pageContext":{"slug":"/blog/2018/12/dear-middlewares/","previousPage":{"id":"72543fad-6406-5c70-aa50-fcf32ae57fe5","excerpt":"Wow! I love blogging so much already. Did you know that “despite its name, salted duck eggs can also be made from\nchicken eggs, though the…","fields":{"slug":"/blog/12-2-2018-first-post/"},"timeToRead":1,"frontmatter":{"date":"September 06, 2015","title":"My Second Post!","tags":["animals"],"category":"Interview"}},"nextPage":null}}