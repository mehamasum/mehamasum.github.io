{"data":{"site":{"siteMetadata":{"title":"Meha Masum","author":"Meha Masum","fbAppId":"491095678046627","blogTitle":"Learning in public","blogSlogan":"Meha Masum's Personal Blog","siteUrl":"https://860a836e.ngrok.io"}},"markdownRemark":{"id":"8ea69209-465b-5009-a8cb-54cabf2a35f8","timeToRead":3,"excerpt":"In this post we will talk about middlewares in general- what they are and how to write them. We will get our hands dirty by writing some…","html":"<p>In this post we will talk about middlewares in general- what they are and how to write them.<br>\nWe will get our hands dirty by writing some examples first. In the later part we will use our knowledge to write middlewares for various frameworks like ReduxJS, ExpressJS and Django.</p>\n<h2 id=\"what-is-middleware\"><a href=\"#what-is-middleware\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is middleware?</h2>\n<p>In general, middleware is some code you can put between some other code (hence the name). </p>\n<p>For example, when a server-side library receives a request, it will generate a response in return. Now you wish to “log” every request it receives. So you put a middleware in between the code of receiving a request and generating a response that will log the request.</p>\n<p>But why would you put a middleware there? Can’t you just log the request “in-place”?</p>\n<p>Lets say your server handles two request, one at <code class=\"language-text\">/dashboard</code> and one at <code class=\"language-text\">/inbox</code> like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function getResponseForDashboardRequest(request) {\n    ...\n    log(request)\n    ...\n    return generateResponseForDashboardRequest(request.data)\n}\n\nfunction getResponseForInboxRequest(request) {\n    ...\n    log(request)\n    ...\n    return generateResponseForInboxRequest(request.data)\n}\n\n...</code></pre></div>\n<p>Of course you can do that.<br>\nBut what if you have so many of these functions?. Would you edit all of them and add a <code class=\"language-text\">log</code> call on top?  </p>\n<p>Now think that you not only want to “log” the request, you want to know who the request came from, in every view. You can do so like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function getResponseForDashboardRequest(request) {\n    ...\n    log(request)\n    user = makeDatabaseCall(request.authHeaders)\n    if(user.anonymous) return errorResponse(&quot;Not authorized&quot;)\n    ...\n    return generateResponseForDashboardRequest(user.id, request.data)\n}\n\nfunction getResponseForInboxRequest(request) {\n    ...\n    log(request)\n    user = makeDatabaseCall(request.authHeaders)\n    if(user.anonymous) return errorResponse(&quot;Not authorized&quot;)\n    ...\n    return generateResponseForInboxRequest(user.id, request.data)\n}\n\n...</code></pre></div>\n<p>Writing these common functionalities in every function is clearly not the right approach. Because we never want to repeat ourselves.  </p>\n<p>So how do we make sure everytime a request comes in we log that request and find out who the user is, before generating a response?  </p>\n<p>Comes the idea of a middleware.\nWe could put some code “between” the process of getting the request and generating a response:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Request =&gt; Log request in middleware =&gt; Get user details in middleware =&gt; (any) Response Generator.</code></pre></div>\n<p>Before we move on to write middlewares pause and think for a bit where our middlewares would sit in this scenario.</p>\n<p>Our’s should be inside the <code class=\"language-text\">router</code> thing. Because it is responsible to look at the url of the request and sending it to a view. So our modified router would first call the middlewares and then send the request to view.</p>\n<p>Here is how the problem is solved:\nYou write two individual functions that we wrote in previous attempt:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function logMiddleware(request) {\n    log(request)\n    return request\n}\n\nfunction authMiddleware(request) {\n    user = makeDatabaseCall(request.authHeaders)\n    if(user.anonymous) {\n        throw Error(&quot;Not authorized&quot;) \n    }\n    else {\n        reuest.user = user\n        return request\n    }\n}</code></pre></div>\n<p>Now we modify our <code class=\"language-text\">router</code> thingy to call the middlewares. Assuming there is a <code class=\"language-text\">router.dispatch</code> function that takes on a request and find an appropriate view to generate response, how can we modify it to use our middlewares?</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">router.dispatch = function(request) {\n    path = request.url\n    handler = router.handlers[path]\n    if(handler) {\n        try {\n            request = logMiddleware(request)\n            request = authMiddleware(request)\n            response = handler(request)\n            return response\n        } \n        catch error {\n            return errorResponse(error)\n        }\n    } else {\n        return 404\n    }</code></pre></div>\n<p>Now let’s modify our design so we can use array, instead of manually calling them.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">middlewares = [logMiddleware, authMiddleware]\ntry {\n    middlewares.forEach(middleware =&gt; {\n        request = middleware(request) \n    }\n    response = handler(request)\n    return response\n} \ncatch error {\n    return errorResponse(error)\n}</code></pre></div>\n<p>But the design is still not very good. We are changing the input <code class=\"language-text\">request</code> inside this method. A better way would be to send the modified <code class=\"language-text\">request</code> dirrectly to the next middleware without altering it.</p>\n<p>The middleware could accept the <code class=\"language-text\">next</code> function as a parameter. So <code class=\"language-text\">logMiddleware</code> would take <code class=\"language-text\">authMiddleware</code>, that one will take the original view function.</p>\n<p>So our modified design would look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">function logMiddleware(request, next) {\n    log(request)\n    return next(request)\n}\n\nfunction authMiddleware(request, next) {\n    user = makeDatabaseCall(request.authHeaders)\n    if(user.anonymous) {\n        throw Error(&quot;Not authorized&quot;) \n    }\n    else {\n        reuest.user = user\n        return next(request)\n    }\n}</code></pre></div>\n<p>And we call it like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">middlewares = [logMiddleware, authMiddleware]\ntry {\n    let response = handler \n    middlewares.forEach(middleware =&gt; {\n        response = middleware(request)(handler)\n    })\n    return response\n} \ncatch error {\n    return errorResponse(error)\n}</code></pre></div>\n<blockquote>\n<p>The best part of middleware is that it’s composable in a chain. You can use multiple third-party middleware in your project.</p>\n</blockquote>","frontmatter":{"title":"Lets know middlewares better","date":"December 21, 2018","tags":["middlewares","reduxjs","expressjs","django"],"category":"Tech","thumbnail":"/images/meta/favicon.png","spoiler":"Lessons learned from writing middlewares."}}},"pageContext":{"slug":"/blog/2018/12/dear-middlewares/","previousPage":{"id":"72543fad-6406-5c70-aa50-fcf32ae57fe5","excerpt":"Wow! I love blogging so much already. Did you know that “despite its name, salted duck eggs can also be made from\nchicken eggs, though the…","fields":{"slug":"/blog/12-2-2018-first-post/"},"timeToRead":1,"frontmatter":{"date":"September 06, 2015","title":"My Second Post!","tags":["animals"],"category":"Interview"}},"nextPage":null}}