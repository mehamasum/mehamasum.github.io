{"data":{"site":{"siteMetadata":{"title":null,"author":null,"fbAppId":null,"blogTitle":null,"blogSlogan":null,"siteUrl":null}},"markdownRemark":{"id":"8ea69209-465b-5009-a8cb-54cabf2a35f8","timeToRead":9,"excerpt":"This is the common structure of every redux middleware: When I first started, it really confused me. We are here to talk about how it got…","html":"<p>This is the common structure of every redux middleware:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">middleware</span> <span class=\"token operator\">=</span> store <span class=\"token operator\">=></span> next <span class=\"token operator\">=></span> action <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>When I first started, it really confused me. We are here to talk about how it got that structure and take a closer look to help you understand middleware better.</p>\n<p>In this post firstly we will talk about middlewares in general. If you are familiar with the concept you can start from the next section.</p>\n<h2 id=\"what-is-middleware\"><a href=\"#what-is-middleware\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What is middleware?</h2>\n<p>In general, middleware is some code you can put in between some other code (hence the name).</p>\n<p>For example, when a server-side library receives a request at a particular endpoint, the associated “view” will generate a response in return.</p>\n<p>Now you may wish to “log” every request it receives. Instead of logging the request manually in each endpoint’s “view”, you can put a middleware in between the code of receiving a request and generating a response.</p>\n<p>Similarly if you want to parse the “body” of the request you don’t want to do that in every function. You may add a middleware that parses the body of each request so that your “view”s get already parsed body to work with.</p>\n<p>There could be many more of those. For example one middleware may check the authtication credentials of the request and put the user details in that request- so that the response generators don’t have to make a DB call to find out who the request came from.</p>\n<p>Here is conceptual view for this example:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">request received-&gt; one middleware logs -&gt; another parses its body -&gt; one middleware add request makers info -&gt; response generator receives a readymade request</code></pre></div>\n<h2 id=\"redux-middleware\"><a href=\"#redux-middleware\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux middleware</h2>\n<p>Redux middleware is conceptually similiar with those of server-side libraries, yet it solves an entirely different problem. Assuming we know nothing about it, let’s start from the begining.</p>\n<blockquote>\n<p>Redux middleware provides a third-party extension point between dispatching an action, and the moment it reaches the reducer.</p>\n</blockquote>\n<p>Let’s think about that for a minute. Like any other middleware, it sits between two points. In this case, between dispatching an action (<code class=\"language-text\">store.dispatch</code> call) and the action reaching the reducers (state update). So here is a conceptual view:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">action dispatched -&gt; middleware -&gt; reducer</code></pre></div>\n<p>Having this goal in mind, think about how can we achieve this?\nLet’s take a real problem and try to solve it.</p>\n<h3 id=\"problem-1-log-action-and-corresponding-state-change\"><a href=\"#problem-1-log-action-and-corresponding-state-change\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Problem #1: Log action and corresponding state change</h3>\n<blockquote>\n<p>One of the benefits of Redux is that it makes state changes predictable and transparent. Every time an action is dispatched, the new state is computed and saved. The state cannot change by itself, it can only change as a consequence of a specific action.</p>\n</blockquote>\n<p>We want to log every action that is dispatched and how that action changed the state. That way, when something is wrong we can look back at our log and figure out which action is resposible in putting our app in a wrong state like this.</p>\n<p>So it is very obivious that we have to do this for every action we will write:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dispatching'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new state'</span><span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>But we don’t want to do that- every time we write an action we don’t want to add some <code class=\"language-text\">console.log</code>s.</p>\n<p>So what else can we do?\nWe could write our own version of dispatch and call it every time.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ourDispatch</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dispatching'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n  store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new state'</span><span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So everytime we want to dispatch an action, we call <code class=\"language-text\">ourDispatch</code> instead of <code class=\"language-text\">store.dispatch</code>. What if a new dev in our team calls <code class=\"language-text\">store.dispatch</code> unintentionally at one place? That action will never be logged. So this doesn’t feel the right way to go about it.</p>\n<p>Now it is obivious that we need to modify <code class=\"language-text\">store.dispatch</code> itself.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> originalDispatch <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>dispatch\nstore<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">dispatch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ourDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dispatching'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> originalReturnValue <span class=\"token operator\">=</span> <span class=\"token function\">originalDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new state'</span><span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> originalReturnValue\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So what we did there basically?\nWe copied the original version of <code class=\"language-text\">store.dispatch</code> to <code class=\"language-text\">oldDispatch</code>. Then we assign it our own definition. The original one take one argument <code class=\"language-text\">action</code>, so do we. We put the log call before calling the original <code class=\"language-text\">dispatch</code> and then return the <code class=\"language-text\">originalReturnValue</code>. May be, we do not know what original dispatch was supposed to return, but we don’t want to polute it’s old signature.</p>\n<p>So we got what we wanted. But this is a bad approach. Because we are modifying things at our will, but we know things should only be <a href=\"https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle\">extended not modified</a>. But let’s keep it like this for a while.</p>\n<h3 id=\"problem-2-add-common-error-catching-behaviour\"><a href=\"#problem-2-add-common-error-catching-behaviour\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Problem #2: Add common error catching behaviour</h3>\n<p>Now if we want to add error catching behaviour, we will modify <code class=\"language-text\">dispatch</code> one more time:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> originalDispatch <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>dispatch\nstore<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">dispatch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ourDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dispatching'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> originalReturnValue <span class=\"token operator\">=</span> <span class=\"token function\">originalDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new state'</span><span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> originalReturnValue\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> modifiedDispatch <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>dispatch\nstore<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">dispatch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ourNewDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> originalReturnValue <span class=\"token operator\">=</span> <span class=\"token function\">modifiedDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> originalReturnValue\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Caught an exception!'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throw</span> err\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Ideally such new functions like <code class=\"language-text\">ourDispatch</code> and <code class=\"language-text\">ourNewDispatch</code> will be in separate modules and might even come from third party packages. So let’s refactor it and make two different functions, so that we can call each one with the <code class=\"language-text\">store</code> as parameter (in opposed to current in-place approach):</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">patchStoreToAddLogging</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> currentDispatch <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>dispatch\n  store<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">dispatch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ourDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dispatching'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> originalReturnValue <span class=\"token operator\">=</span> <span class=\"token function\">currentDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new state'</span><span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> originalReturnValue\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">patchStoreToSupportErrorHandling</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> currentDispatch <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>dispatch\n  store<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">dispatch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ourNewDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> originalReturnValue <span class=\"token operator\">=</span> <span class=\"token function\">currentDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> originalReturnValue\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Caught an exception!'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">throw</span> err\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now if these functions are published as separate modules, we can call them easily after one another:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token function\">patchStoreToAddLogging</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span>\n<span class=\"token function\">patchStoreToSupportErrorHandling</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Notice that how we can ‘chain’ multiple middlewares in this fashion. Each modifies the current version of the <code class=\"language-text\">dispatch</code> and calls it.</p>\n<p>Now let’s go back to our previous problem. We don’t want to modify the library function <code class=\"language-text\">store.dispatch</code> like this. What else could we do? Instead of modifying we could just return the new version of the <code class=\"language-text\">store.dispatch</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">patchStoreToAddLogging</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> currentDispatch <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>dispatch\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ourDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dispatching'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">let</span> originalReturnValue <span class=\"token operator\">=</span> <span class=\"token function\">currentDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new state'</span><span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> originalReturnValue\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">patchStoreToSupportErrorHandling</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> currentDispatch <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>dispatch\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ourNewDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> originalReturnValue <span class=\"token operator\">=</span> <span class=\"token function\">currentDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> originalReturnValue\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Caught an exception!'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">throw</span> err\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>But how would we ‘chain’ them without assigning them to <code class=\"language-text\">store.dispatch</code> like this?</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">store<span class=\"token punctuation\">.</span>dispatch <span class=\"token operator\">=</span> <span class=\"token function\">patchStoreToAddLogging</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span>\nstore<span class=\"token punctuation\">.</span>dispatch <span class=\"token operator\">=</span> <span class=\"token function\">patchStoreToSupportErrorHandling</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span></code></pre></div>\n<p>If we want to avoid assigning, in order to ‘chain’ them we have pass the current version of <code class=\"language-text\">store.dispatch</code> to each of them as argument. That way, the first function will get the original <code class=\"language-text\">store.dispatch</code> and return a new version of <code class=\"language-text\">store.dispatch</code>. This will go as argument to the second function so that can return a further modified version. Eventually we will receive a fully changed version of <code class=\"language-text\">store.dispatch</code>. Instead of changing <code class=\"language-text\">store.dispatch</code> itself we will create a copy of store at setup time with the last fully changed version of <code class=\"language-text\">dispatch</code>.</p>\n<p>So the final version of those two functions will look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">patchStoreToAddLogging</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">wrapDispatch</span><span class=\"token punctuation\">(</span>currentDispatch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ourDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dispatching'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">let</span> originalReturnValue <span class=\"token operator\">=</span> <span class=\"token function\">currentDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new state'</span><span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> originalReturnValue\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">patchStoreToSupportErrorHandling</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">wrapDispatch</span><span class=\"token punctuation\">(</span>currentDispatch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ourNewDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> originalReturnValue <span class=\"token operator\">=</span> <span class=\"token function\">currentDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> originalReturnValue\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Caught an exception!'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> err\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Just one line of change in each function: <code class=\"language-text\">currentDispatch</code> now comes as a argument, not from <code class=\"language-text\">store</code>. This allows us to apply the desired chaining without assigning everytime. With this we would get a new copy of <code class=\"language-text\">store</code> object when we set things up t the beginning and work with that.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">let</span> dispatch <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>dispatch\ndispatch <span class=\"token operator\">=</span> <span class=\"token function\">patchStoreToAddLogging</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">)</span>\ndispatch <span class=\"token operator\">=</span> <span class=\"token function\">patchStoreToSupportErrorHandling</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> newStore <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> dispatch <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Of course we could loop over an array and still get that final fully wrapped <code class=\"language-text\">dispatch</code>. Now let’s make a helper function for setting things up:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">ourApplyMiddleware</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">,</span> middlewares<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  middlewares <span class=\"token operator\">=</span> middlewares<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  middlewares<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> dispatch <span class=\"token operator\">=</span> store<span class=\"token punctuation\">.</span>dispatch\n  middlewares<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>middleware <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>dispatch <span class=\"token operator\">=</span> <span class=\"token function\">middleware</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>dispatch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> dispatch <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>And it will be called like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> newStore <span class=\"token operator\">=</span> <span class=\"token function\">ourApplyMiddleware</span><span class=\"token punctuation\">(</span>store<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n  patchStoreToAddLogging<span class=\"token punctuation\">,</span>\n  patchStoreToSupportErrorHandling<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>There we have it. We got a <code class=\"language-text\">store</code> object for our app.</p>\n<h3 id=\"reduxs-own-applymiddleware\"><a href=\"#reduxs-own-applymiddleware\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Redux’s own applyMiddleware</h3>\n<p>Of course Redux provides an utility called <code class=\"language-text\">applyMiddleware</code> that would take care of calling our functions while setting up a store. <code class=\"language-text\">createStore</code> takes an optional last argument for this purpose.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>\n  <span class=\"token function\">combineReducers</span><span class=\"token punctuation\">(</span>reducers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token operator\">...</span>\n  <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>patchStoreToAddLogging<span class=\"token punctuation\">,</span> patchStoreToSupportErrorHandling<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>It will apply the middlewares and return to us the final version of <code class=\"language-text\">store</code>.</p>\n<h3 id=\"almost-there\"><a href=\"#almost-there\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Almost there</h3>\n<p>Now lets take a look again our middlewares. With ES6 arrow function they would look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">patchStoreToAddLogging</span> <span class=\"token operator\">=</span> store <span class=\"token operator\">=></span> currentDispatch <span class=\"token operator\">=></span> action <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'dispatching'</span><span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">let</span> originalReturnValue <span class=\"token operator\">=</span> <span class=\"token function\">currentDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'new state'</span><span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> originalReturnValue\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">patchStoreToSupportErrorHandling</span> <span class=\"token operator\">=</span> store <span class=\"token operator\">=></span> currentDispatch <span class=\"token operator\">=></span> action <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> originalReturnValue <span class=\"token operator\">=</span> <span class=\"token function\">currentDispatch</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> originalReturnValue\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Caught an exception!'</span><span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throw</span> err\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Traditionally <code class=\"language-text\">currentDispatch</code> is often named <code class=\"language-text\">next</code> (as this version of dispatch will be called next inside a middleware) and middlewares would look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">middleware</span> <span class=\"token operator\">=</span> store <span class=\"token operator\">=></span> next <span class=\"token operator\">=></span> action <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>I hope now you understand why there is that <code class=\"language-text\">store =&gt; next =&gt; action</code> thingy in every redux middleware.</p>\n<h3 id=\"an-observation\"><a href=\"#an-observation\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>An observation</h3>\n<p>I have seen a lot of tutorials online and several npm package’s source code that come with middlewares that we can use in our projects and found out one crutial mistake in many such codes:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">middleware</span> <span class=\"token operator\">=</span> store <span class=\"token operator\">=></span> next <span class=\"token operator\">=></span> action <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token operator\">...</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>They just call <code class=\"language-text\">next</code> but doesn’t return the value. It is <strong>bad side effects</strong>.</p>\n<p>As middlewares are chained together, if one of them forgets to return the value of <code class=\"language-text\">next</code> call, it will return <code class=\"language-text\">undefined</code> to the previous caller. There are many cases (specially with Async operations), where the return value is very important of the caller of <code class=\"language-text\">dispatch</code>. I intend to write another blog post with a case study about this.</p>\n<p>See you for in the next post.</p>","frontmatter":{"title":"Lets know redux middlewares better","date":"December 21, 2018","tags":["middleware","reduxjs"],"category":"General","thumbnail":"/images/posts/redux.png","spoiler":"Do redux middleware confuse you? Take a deep breath and read on."}}},"pageContext":{"slug":"/blog/2018/12/dear-middlewares/","previousPage":null,"nextPage":null}}